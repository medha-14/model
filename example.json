{"py/object": "model2.CustomModel", "py/id": 130618812754560, "pybamm_version": "25.6.0", "name": "Doyle-Fuller-Newman model", "options": {"calculate discharge energy": "false", "calculate heat source for isothermal models": "false", "cell geometry": "arbitrary", "contact resistance": "false", "convection": "none", "current collector": "uniform", "diffusivity": "single", "dimensionality": 0, "electrolyte conductivity": "default", "exchange-current density": "single", "heat of mixing": "false", "hydrolysis": "false", "intercalation kinetics": "symmetric Butler-Volmer", "interface utilisation": "full", "lithium plating": "none", "lithium plating porosity change": "false", "loss of active material": "none", "number of MSMR reactions": "none", "open-circuit potential": "single", "operating mode": "current", "particle": "Fickian diffusion", "particle mechanics": "none", "particle phases": "1", "particle shape": "spherical", "particle size": "single", "SEI": "none", "SEI film resistance": "none", "SEI on cracks": "false", "SEI porosity change": "false", "stress-induced diffusion": "false", "surface form": "false", "surface temperature": "ambient", "thermal": "isothermal", "total interfacial current density as a state": "false", "transport efficiency": "Bruggeman", "voltage as a state": "false", "working electrode": "both", "x-average side reactions": "false", "use lumped thermal capacity": "false"}, "bounds": [[-Infinity, -Infinity, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity], [Infinity, Infinitynfinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity]], "concatenated_rhs": {"py/object": "pybamm.expression_tree.concatenations.NumpyConcatenation", "py/id": 130618811210864, "name": "numpy_concatenation", "id": -6862048875972577910, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618810039184, "name": "Column vector of length 1", "id": -6866812283123811425, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": [[0.00018906]], "children": []}, {"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618810039184, "name": "Column vector of length 1", "id": -6866812283123811425, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": [[0.00018906]], "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618810149216, "name": "+", "id": -5090653068171477443, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618810151760, "name": "@", "id": -7254580433630251852, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618810151136, "name": "Sparse Matrix (400, 400)", "id": -1551356555532850681, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [400, 400], "data": [0.46799999999999997, -0.46799999999999997, 0.26742857142857135, -0.33428571428571413, 0.06685714285714284, 0.2216842105263158, -0.32021052631578945, 0.09852631578947364, 0.20237837837837827, -0.31621621621621615, 0.11383783783783784, 0.19180327868852443, -0.3145573770491801, 0.12275409836065562, 0.18514285714285736, -0.3137142857142859, 0.12857142857142853, 0.18056692913385822, -0.31322834645669306, 0.13266141732283482, 0.17723076923076905, -0.31292307692307664, 0.13569230769230756, 0.17469124423963112, -0.3127188940092162, 0.1380276497695851, 0.17269372693726953, -0.3125756457564576, 0.13988191881918807, 0.17108157099697885, -0.3124712990936559, 0.14138972809667702, 0.16975314861460938, -0.3123929471032742, 0.14263979848866482, 0.16863965884861393, -0.31233262260127903, 0.1436929637526651, 0.16769287020109722, -0.3122851919561247, 0.14459232175502748, 0.16687797147385053, -0.31224722662440524, 0.1453692551505547, 0.1661692094313458, -0.31221636615811377, 0.14604715672676796, 0.16554712362301016, -0.31219094247245965, 0.1466438188494495, 0.1649967355821549, -0.31216974972796485, 0.14717301414580997, 0.16450632911392388, -0.31215189873417737, 0.14764556962025352, -0.14807011393514496, 0.14807011393514496, 0.46799999999999997, -0.46799999999999997, 0.26742857142857135, -0.33428571428571413, 0.06685714285714284, 0.2216842105263158, -0.32021052631578945, 0.09852631578947364, 0.20237837837837827, -0.31621621621621615, 0.11383783783783784, 0.19180327868852443, -0.3145573770491801, 0.12275409836065562, 0.18514285714285736, -0.3137142857142859, 0.12857142857142853, 0.18056692913385822, -0.31322834645669306, 0.13266141732283482, 0.17723076923076905, -0.31292307692307664, 0.13569230769230756, 0.17469124423963112, -0.3127188940092162, 0.1380276497695851, 0.17269372693726953, -0.3125756457564576, 0.13988191881918807, 0.17108157099697885, -0.3124712990936559, 0.14138972809667702, 0.16975314861460938, -0.3123929471032742, 0.14263979848866482, 0.16863965884861393, -0.31233262260127903, 0.1436929637526651, 0.16769287020109722, -0.3122851919561247, 0.14459232175502748, 0.16687797147385053, -0.31224722662440524, 0.1453692551505547, 0.1661692094313458, -0.31221636615811377, 0.14604715672676796, 0.16554712362301016, -0.31219094247245965, 0.1466438188494495, 0.1649967355821549, -0.31216974972796485, 0.14717301414580997, 0.16450632911392388, -0.31215189873417737, 0.14764556962025352, -0.14807011393514496, 0.14807011393514496, 0.46799999999999997, -0.46799999999999997, 0.26742857142857135, -0.33428571428571413, 0.06685714285714284, 0.2216842105263158, -0.32021052631578945, 0.09852631578947364, 0.20237837837837827, -0.31621621621621615, 0.11383783783783784, 0.19180327868852443, -0.3145573770491801, 0.12275409836065562, 0.18514285714285736, -0.3137142857142859, 0.12857142857142853, 0.18056692913385822, -0.31322834645669306, 0.13266141732283482, 0.17723076923076905, -0.31292307692307664, 0.13569230769230756, 0.17469124423963112, -0.3127188940092162, 0.1380276497695851, 0.17269372693726953, -0.3125756457564576, 0.13988191881918807, 0.17108157099697885, -0.3124712990936559, 0.14138972809667702, 0.16975314861460938, -0.3123929471032742, 0.14263979848866482, 0.16863965884861393, -0.31233262260127903, 0.1436929637526651, 0.16769287020109722, -0.3122851919561247, 0.14459232175502748, 0.16687797147385053, -0.31224722662440524, 0.1453692551505547, 0.1661692094313458, -0.31221636615811377, 0.14604715672676796, 0.16554712362301016, -0.31219094247245965, 0.1466438188494495, 0.1649967355821549, -0.31216974972796485, 0.14717301414580997, 0.16450632911392388, -0.31215189873417737, 0.14764556962025352, -0.14807011393514496, 0.14807011393514496, 0.46799999999999997, -0.46799999999999997, 0.26742857142857135, -0.33428571428571413, 0.06685714285714284, 0.2216842105263158, -0.32021052631578945, 0.09852631578947364, 0.20237837837837827, -0.31621621621621615, 0.11383783783783784, 0.19180327868852443, -0.3145573770491801, 0.12275409836065562, 0.18514285714285736, -0.3137142857142859, 0.12857142857142853, 0.18056692913385822, -0.31322834645669306, 0.13266141732283482, 0.17723076923076905, -0.31292307692307664, 0.13569230769230756, 0.17469124423963112, -0.3127188940092162, 0.1380276497695851, 0.17269372693726953, -0.3125756457564576, 0.13988191881918807, 0.17108157099697885, -0.3124712990936559, 0.14138972809667702, 0.16975314861460938, -0.3123929471032742, 0.14263979848866482, 0.16863965884861393, -0.31233262260127903, 0.1436929637526651, 0.16769287020109722, -0.3122851919561247, 0.14459232175502748, 0.16687797147385053, -0.31224722662440524, 0.1453692551505547, 0.1661692094313458, -0.31221636615811377, 0.14604715672676796, 0.16554712362301016, -0.31219094247245965, 0.1466438188494495, 0.1649967355821549, -0.31216974972796485, 0.14717301414580997, 0.16450632911392388, -0.31215189873417737, 0.14764556962025352, -0.14807011393514496, 0.14807011393514496, 0.46799999999999997, -0.46799999999999997, 0.26742857142857135, -0.33428571428571413, 0.06685714285714284, 0.2216842105263158, -0.32021052631578945, 0.09852631578947364, 0.20237837837837827, -0.31621621621621615, 0.11383783783783784, 0.19180327868852443, -0.3145573770491801, 0.12275409836065562, 0.18514285714285736, -0.3137142857142859, 0.12857142857142853, 0.18056692913385822, -0.31322834645669306, 0.13266141732283482, 0.17723076923076905, -0.31292307692307664, 0.13569230769230756, 0.17469124423963112, -0.3127188940092162, 0.1380276497695851, 0.17269372693726953, -0.3125756457564576, 0.13988191881918807, 0.17108157099697885, -0.3124712990936559, 0.14138972809667702, 0.16975314861460938, -0.3123929471032742, 0.14263979848866482, 0.16863965884861393, -0.31233262260127903, 0.1436929637526651, 0.16769287020109722, -0.3122851919561247, 0.14459232175502748, 0.16687797147385053, -0.31224722662440524, 0.1453692551505547, 0.1661692094313458, -0.31221636615811377, 0.14604715672676796, 0.16554712362301016, -0.31219094247245965, 0.1466438188494495, 0.1649967355821549, -0.31216974972796485, 0.14717301414580997, 0.16450632911392388, -0.31215189873417737, 0.14764556962025352, -0.14807011393514496, 0.14807011393514496, 0.46799999999999997, -0.46799999999999997, 0.26742857142857135, -0.33428571428571413, 0.06685714285714284, 0.2216842105263158, -0.32021052631578945, 0.09852631578947364, 0.20237837837837827, -0.31621621621621615, 0.11383783783783784, 0.19180327868852443, -0.3145573770491801, 0.12275409836065562, 0.18514285714285736, -0.3137142857142859, 0.12857142857142853, 0.18056692913385822, -0.31322834645669306, 0.13266141732283482, 0.17723076923076905, -0.31292307692307664, 0.13569230769230756, 0.17469124423963112, -0.3127188940092162, 0.1380276497695851, 0.17269372693726953, -0.3125756457564576, 0.13988191881918807, 0.17108157099697885, -0.3124712990936559, 0.14138972809667702, 0.16975314861460938, -0.3123929471032742, 0.14263979848866482, 0.16863965884861393, -0.31233262260127903, 0.1436929637526651, 0.16769287020109722, -0.3122851919561247, 0.14459232175502748, 0.16687797147385053, -0.31224722662440524, 0.1453692551505547, 0.1661692094313458, -0.31221636615811377, 0.14604715672676796, 0.16554712362301016, -0.31219094247245965, 0.1466438188494495, 0.1649967355821549, -0.31216974972796485, 0.14717301414580997, 0.16450632911392388, -0.31215189873417737, 0.14764556962025352, -0.14807011393514496, 0.14807011393514496, 0.46799999999999997, -0.46799999999999997, 0.26742857142857135, -0.33428571428571413, 0.06685714285714284, 0.2216842105263158, -0.32021052631578945, 0.09852631578947364, 0.20237837837837827, -0.31621621621621615, 0.11383783783783784, 0.19180327868852443, -0.3145573770491801, 0.12275409836065562, 0.18514285714285736, -0.3137142857142859, 0.12857142857142853, 0.18056692913385822, -0.31322834645669306, 0.13266141732283482, 0.17723076923076905, -0.31292307692307664, 0.13569230769230756, 0.17469124423963112, -0.3127188940092162, 0.1380276497695851, 0.17269372693726953, -0.3125756457564576, 0.13988191881918807, 0.17108157099697885, -0.3124712990936559, 0.14138972809667702, 0.16975314861460938, -0.3123929471032742, 0.14263979848866482, 0.16863965884861393, -0.31233262260127903, 0.1436929637526651, 0.16769287020109722, -0.3122851919561247, 0.14459232175502748, 0.16687797147385053, -0.31224722662440524, 0.1453692551505547, 0.1661692094313458, -0.31221636615811377, 0.14604715672676796, 0.16554712362301016, -0.31219094247245965, 0.1466438188494495, 0.1649967355821549, -0.31216974972796485, 0.14717301414580997, 0.16450632911392388, -0.31215189873417737, 0.14764556962025352, -0.14807011393514496, 0.14807011393514496, 0.46799999999999997, -0.46799999999999997, 0.26742857142857135, -0.33428571428571413, 0.06685714285714284, 0.2216842105263158, -0.32021052631578945, 0.09852631578947364, 0.20237837837837827, -0.31621621621621615, 0.11383783783783784, 0.19180327868852443, -0.3145573770491801, 0.12275409836065562, 0.18514285714285736, -0.3137142857142859, 0.12857142857142853, 0.18056692913385822, -0.31322834645669306, 0.13266141732283482, 0.17723076923076905, -0.31292307692307664, 0.13569230769230756, 0.17469124423963112, -0.3127188940092162, 0.1380276497695851, 0.17269372693726953, -0.3125756457564576, 0.13988191881918807, 0.17108157099697885, -0.3124712990936559, 0.14138972809667702, 0.16975314861460938, -0.3123929471032742, 0.14263979848866482, 0.16863965884861393, -0.31233262260127903, 0.1436929637526651, 0.16769287020109722, -0.3122851919561247, 0.14459232175502748, 0.16687797147385053, -0.31224722662440524, 0.1453692551505547, 0.1661692094313458, -0.31221636615811377, 0.14604715672676796, 0.16554712362301016, -0.31219094247245965, 0.1466438188494495, 0.1649967355821549, -0.31216974972796485, 0.14717301414580997, 0.16450632911392388, -0.31215189873417737, 0.14764556962025352, -0.14807011393514496, 0.14807011393514496, 0.46799999999999997, -0.46799999999999997, 0.26742857142857135, -0.33428571428571413, 0.06685714285714284, 0.2216842105263158, -0.32021052631578945, 0.09852631578947364, 0.20237837837837827, -0.31621621621621615, 0.11383783783783784, 0.19180327868852443, -0.3145573770491801, 0.12275409836065562, 0.18514285714285736, -0.3137142857142859, 0.12857142857142853, 0.18056692913385822, -0.31322834645669306, 0.13266141732283482, 0.17723076923076905, -0.31292307692307664, 0.13569230769230756, 0.17469124423963112, -0.3127188940092162, 0.1380276497695851, 0.17269372693726953, -0.3125756457564576, 0.13988191881918807, 0.17108157099697885, -0.3124712990936559, 0.14138972809667702, 0.16975314861460938, -0.3123929471032742, 0.14263979848866482, 0.16863965884861393, -0.31233262260127903, 0.1436929637526651, 0.16769287020109722, -0.3122851919561247, 0.14459232175502748, 0.16687797147385053, -0.31224722662440524, 0.1453692551505547, 0.1661692094313458, -0.31221636615811377, 0.14604715672676796, 0.16554712362301016, -0.31219094247245965, 0.1466438188494495, 0.1649967355821549, -0.31216974972796485, 0.14717301414580997, 0.16450632911392388, -0.31215189873417737, 0.14764556962025352, -0.14807011393514496, 0.14807011393514496, 0.46799999999999997, -0.46799999999999997, 0.26742857142857135, -0.33428571428571413, 0.06685714285714284, 0.2216842105263158, -0.32021052631578945, 0.09852631578947364, 0.20237837837837827, -0.31621621621621615, 0.11383783783783784, 0.19180327868852443, -0.3145573770491801, 0.12275409836065562, 0.18514285714285736, -0.3137142857142859, 0.12857142857142853, 0.18056692913385822, -0.31322834645669306, 0.13266141732283482, 0.17723076923076905, -0.31292307692307664, 0.13569230769230756, 0.17469124423963112, -0.3127188940092162, 0.1380276497695851, 0.17269372693726953, -0.3125756457564576, 0.13988191881918807, 0.17108157099697885, -0.3124712990936559, 0.14138972809667702, 0.16975314861460938, -0.3123929471032742, 0.14263979848866482, 0.16863965884861393, -0.31233262260127903, 0.1436929637526651, 0.16769287020109722, -0.3122851919561247, 0.14459232175502748, 0.16687797147385053, -0.31224722662440524, 0.1453692551505547, 0.1661692094313458, -0.31221636615811377, 0.14604715672676796, 0.16554712362301016, -0.31219094247245965, 0.1466438188494495, 0.1649967355821549, -0.31216974972796485, 0.14717301414580997, 0.16450632911392388, -0.31215189873417737, 0.14764556962025352, -0.14807011393514496, 0.14807011393514496, 0.46799999999999997, -0.46799999999999997, 0.26742857142857135, -0.33428571428571413, 0.06685714285714284, 0.2216842105263158, -0.32021052631578945, 0.09852631578947364, 0.20237837837837827, -0.31621621621621615, 0.11383783783783784, 0.19180327868852443, -0.3145573770491801, 0.12275409836065562, 0.18514285714285736, -0.3137142857142859, 0.12857142857142853, 0.18056692913385822, -0.31322834645669306, 0.13266141732283482, 0.17723076923076905, -0.31292307692307664, 0.13569230769230756, 0.17469124423963112, -0.3127188940092162, 0.1380276497695851, 0.17269372693726953, -0.3125756457564576, 0.13988191881918807, 0.17108157099697885, -0.3124712990936559, 0.14138972809667702, 0.16975314861460938, -0.3123929471032742, 0.14263979848866482, 0.16863965884861393, -0.31233262260127903, 0.1436929637526651, 0.16769287020109722, -0.3122851919561247, 0.14459232175502748, 0.16687797147385053, -0.31224722662440524, 0.1453692551505547, 0.1661692094313458, -0.31221636615811377, 0.14604715672676796, 0.16554712362301016, -0.31219094247245965, 0.1466438188494495, 0.1649967355821549, -0.31216974972796485, 0.14717301414580997, 0.16450632911392388, -0.31215189873417737, 0.14764556962025352, -0.14807011393514496, 0.14807011393514496, 0.46799999999999997, -0.46799999999999997, 0.26742857142857135, -0.33428571428571413, 0.06685714285714284, 0.2216842105263158, -0.32021052631578945, 0.09852631578947364, 0.20237837837837827, -0.31621621621621615, 0.11383783783783784, 0.19180327868852443, -0.3145573770491801, 0.12275409836065562, 0.18514285714285736, -0.3137142857142859, 0.12857142857142853, 0.18056692913385822, -0.31322834645669306, 0.13266141732283482, 0.17723076923076905, -0.31292307692307664, 0.13569230769230756, 0.17469124423963112, -0.3127188940092162, 0.1380276497695851, 0.17269372693726953, -0.3125756457564576, 0.13988191881918807, 0.17108157099697885, -0.3124712990936559, 0.14138972809667702, 0.16975314861460938, -0.3123929471032742, 0.14263979848866482, 0.16863965884861393, -0.31233262260127903, 0.1436929637526651, 0.16769287020109722, -0.3122851919561247, 0.14459232175502748, 0.16687797147385053, -0.31224722662440524, 0.1453692551505547, 0.1661692094313458, -0.31221636615811377, 0.14604715672676796, 0.16554712362301016, -0.31219094247245965, 0.1466438188494495, 0.1649967355821549, -0.31216974972796485, 0.14717301414580997, 0.16450632911392388, -0.31215189873417737, 0.14764556962025352, -0.14807011393514496, 0.14807011393514496, 0.46799999999999997, -0.46799999999999997, 0.26742857142857135, -0.33428571428571413, 0.06685714285714284, 0.2216842105263158, -0.32021052631578945, 0.09852631578947364, 0.20237837837837827, -0.31621621621621615, 0.11383783783783784, 0.19180327868852443, -0.3145573770491801, 0.12275409836065562, 0.18514285714285736, -0.3137142857142859, 0.12857142857142853, 0.18056692913385822, -0.31322834645669306, 0.13266141732283482, 0.17723076923076905, -0.31292307692307664, 0.13569230769230756, 0.17469124423963112, -0.3127188940092162, 0.1380276497695851, 0.17269372693726953, -0.3125756457564576, 0.13988191881918807, 0.17108157099697885, -0.3124712990936559, 0.14138972809667702, 0.16975314861460938, -0.3123929471032742, 0.14263979848866482, 0.16863965884861393, -0.31233262260127903, 0.1436929637526651, 0.16769287020109722, -0.3122851919561247, 0.14459232175502748, 0.16687797147385053, -0.31224722662440524, 0.1453692551505547, 0.1661692094313458, -0.31221636615811377, 0.14604715672676796, 0.16554712362301016, -0.31219094247245965, 0.1466438188494495, 0.1649967355821549, -0.31216974972796485, 0.14717301414580997, 0.16450632911392388, -0.31215189873417737, 0.14764556962025352, -0.14807011393514496, 0.14807011393514496, 0.46799999999999997, -0.46799999999999997, 0.26742857142857135, -0.33428571428571413, 0.06685714285714284, 0.2216842105263158, -0.32021052631578945, 0.09852631578947364, 0.20237837837837827, -0.31621621621621615, 0.11383783783783784, 0.19180327868852443, -0.3145573770491801, 0.12275409836065562, 0.18514285714285736, -0.3137142857142859, 0.12857142857142853, 0.18056692913385822, -0.31322834645669306, 0.13266141732283482, 0.17723076923076905, -0.31292307692307664, 0.13569230769230756, 0.17469124423963112, -0.3127188940092162, 0.1380276497695851, 0.17269372693726953, -0.3125756457564576, 0.13988191881918807, 0.17108157099697885, -0.3124712990936559, 0.14138972809667702, 0.16975314861460938, -0.3123929471032742, 0.14263979848866482, 0.16863965884861393, -0.31233262260127903, 0.1436929637526651, 0.16769287020109722, -0.3122851919561247, 0.14459232175502748, 0.16687797147385053, -0.31224722662440524, 0.1453692551505547, 0.1661692094313458, -0.31221636615811377, 0.14604715672676796, 0.16554712362301016, -0.31219094247245965, 0.1466438188494495, 0.1649967355821549, -0.31216974972796485, 0.14717301414580997, 0.16450632911392388, -0.31215189873417737, 0.14764556962025352, -0.14807011393514496, 0.14807011393514496, 0.46799999999999997, -0.46799999999999997, 0.26742857142857135, -0.33428571428571413, 0.06685714285714284, 0.2216842105263158, -0.32021052631578945, 0.09852631578947364, 0.20237837837837827, -0.31621621621621615, 0.11383783783783784, 0.19180327868852443, -0.3145573770491801, 0.12275409836065562, 0.18514285714285736, -0.3137142857142859, 0.12857142857142853, 0.18056692913385822, -0.31322834645669306, 0.13266141732283482, 0.17723076923076905, -0.31292307692307664, 0.13569230769230756, 0.17469124423963112, -0.3127188940092162, 0.1380276497695851, 0.17269372693726953, -0.3125756457564576, 0.13988191881918807, 0.17108157099697885, -0.3124712990936559, 0.14138972809667702, 0.16975314861460938, -0.3123929471032742, 0.14263979848866482, 0.16863965884861393, -0.31233262260127903, 0.1436929637526651, 0.16769287020109722, -0.3122851919561247, 0.14459232175502748, 0.16687797147385053, -0.31224722662440524, 0.1453692551505547, 0.1661692094313458, -0.31221636615811377, 0.14604715672676796, 0.16554712362301016, -0.31219094247245965, 0.1466438188494495, 0.1649967355821549, -0.31216974972796485, 0.14717301414580997, 0.16450632911392388, -0.31215189873417737, 0.14764556962025352, -0.14807011393514496, 0.14807011393514496, 0.46799999999999997, -0.46799999999999997, 0.26742857142857135, -0.33428571428571413, 0.06685714285714284, 0.2216842105263158, -0.32021052631578945, 0.09852631578947364, 0.20237837837837827, -0.31621621621621615, 0.11383783783783784, 0.19180327868852443, -0.3145573770491801, 0.12275409836065562, 0.18514285714285736, -0.3137142857142859, 0.12857142857142853, 0.18056692913385822, -0.31322834645669306, 0.13266141732283482, 0.17723076923076905, -0.31292307692307664, 0.13569230769230756, 0.17469124423963112, -0.3127188940092162, 0.1380276497695851, 0.17269372693726953, -0.3125756457564576, 0.13988191881918807, 0.17108157099697885, -0.3124712990936559, 0.14138972809667702, 0.16975314861460938, -0.3123929471032742, 0.14263979848866482, 0.16863965884861393, -0.31233262260127903, 0.1436929637526651, 0.16769287020109722, -0.3122851919561247, 0.14459232175502748, 0.16687797147385053, -0.31224722662440524, 0.1453692551505547, 0.1661692094313458, -0.31221636615811377, 0.14604715672676796, 0.16554712362301016, -0.31219094247245965, 0.1466438188494495, 0.1649967355821549, -0.31216974972796485, 0.14717301414580997, 0.16450632911392388, -0.31215189873417737, 0.14764556962025352, -0.14807011393514496, 0.14807011393514496, 0.46799999999999997, -0.46799999999999997, 0.26742857142857135, -0.33428571428571413, 0.06685714285714284, 0.2216842105263158, -0.32021052631578945, 0.09852631578947364, 0.20237837837837827, -0.31621621621621615, 0.11383783783783784, 0.19180327868852443, -0.3145573770491801, 0.12275409836065562, 0.18514285714285736, -0.3137142857142859, 0.12857142857142853, 0.18056692913385822, -0.31322834645669306, 0.13266141732283482, 0.17723076923076905, -0.31292307692307664, 0.13569230769230756, 0.17469124423963112, -0.3127188940092162, 0.1380276497695851, 0.17269372693726953, -0.3125756457564576, 0.13988191881918807, 0.17108157099697885, -0.3124712990936559, 0.14138972809667702, 0.16975314861460938, -0.3123929471032742, 0.14263979848866482, 0.16863965884861393, -0.31233262260127903, 0.1436929637526651, 0.16769287020109722, -0.3122851919561247, 0.14459232175502748, 0.16687797147385053, -0.31224722662440524, 0.1453692551505547, 0.1661692094313458, -0.31221636615811377, 0.14604715672676796, 0.16554712362301016, -0.31219094247245965, 0.1466438188494495, 0.1649967355821549, -0.31216974972796485, 0.14717301414580997, 0.16450632911392388, -0.31215189873417737, 0.14764556962025352, -0.14807011393514496, 0.14807011393514496, 0.46799999999999997, -0.46799999999999997, 0.26742857142857135, -0.33428571428571413, 0.06685714285714284, 0.2216842105263158, -0.32021052631578945, 0.09852631578947364, 0.20237837837837827, -0.31621621621621615, 0.11383783783783784, 0.19180327868852443, -0.3145573770491801, 0.12275409836065562, 0.18514285714285736, -0.3137142857142859, 0.12857142857142853, 0.18056692913385822, -0.31322834645669306, 0.13266141732283482, 0.17723076923076905, -0.31292307692307664, 0.13569230769230756, 0.17469124423963112, -0.3127188940092162, 0.1380276497695851, 0.17269372693726953, -0.3125756457564576, 0.13988191881918807, 0.17108157099697885, -0.3124712990936559, 0.14138972809667702, 0.16975314861460938, -0.3123929471032742, 0.14263979848866482, 0.16863965884861393, -0.31233262260127903, 0.1436929637526651, 0.16769287020109722, -0.3122851919561247, 0.14459232175502748, 0.16687797147385053, -0.31224722662440524, 0.1453692551505547, 0.1661692094313458, -0.31221636615811377, 0.14604715672676796, 0.16554712362301016, -0.31219094247245965, 0.1466438188494495, 0.1649967355821549, -0.31216974972796485, 0.14717301414580997, 0.16450632911392388, -0.31215189873417737, 0.14764556962025352, -0.14807011393514496, 0.14807011393514496, 0.46799999999999997, -0.46799999999999997, 0.26742857142857135, -0.33428571428571413, 0.06685714285714284, 0.2216842105263158, -0.32021052631578945, 0.09852631578947364, 0.20237837837837827, -0.31621621621621615, 0.11383783783783784, 0.19180327868852443, -0.3145573770491801, 0.12275409836065562, 0.18514285714285736, -0.3137142857142859, 0.12857142857142853, 0.18056692913385822, -0.31322834645669306, 0.13266141732283482, 0.17723076923076905, -0.31292307692307664, 0.13569230769230756, 0.17469124423963112, -0.3127188940092162, 0.1380276497695851, 0.17269372693726953, -0.3125756457564576, 0.13988191881918807, 0.17108157099697885, -0.3124712990936559, 0.14138972809667702, 0.16975314861460938, -0.3123929471032742, 0.14263979848866482, 0.16863965884861393, -0.31233262260127903, 0.1436929637526651, 0.16769287020109722, -0.3122851919561247, 0.14459232175502748, 0.16687797147385053, -0.31224722662440524, 0.1453692551505547, 0.1661692094313458, -0.31221636615811377, 0.14604715672676796, 0.16554712362301016, -0.31219094247245965, 0.1466438188494495, 0.1649967355821549, -0.31216974972796485, 0.14717301414580997, 0.16450632911392388, -0.31215189873417737, 0.14764556962025352, -0.14807011393514496, 0.14807011393514496, 0.46799999999999997, -0.46799999999999997, 0.26742857142857135, -0.33428571428571413, 0.06685714285714284, 0.2216842105263158, -0.32021052631578945, 0.09852631578947364, 0.20237837837837827, -0.31621621621621615, 0.11383783783783784, 0.19180327868852443, -0.3145573770491801, 0.12275409836065562, 0.18514285714285736, -0.3137142857142859, 0.12857142857142853, 0.18056692913385822, -0.31322834645669306, 0.13266141732283482, 0.17723076923076905, -0.31292307692307664, 0.13569230769230756, 0.17469124423963112, -0.3127188940092162, 0.1380276497695851, 0.17269372693726953, -0.3125756457564576, 0.13988191881918807, 0.17108157099697885, -0.3124712990936559, 0.14138972809667702, 0.16975314861460938, -0.3123929471032742, 0.14263979848866482, 0.16863965884861393, -0.31233262260127903, 0.1436929637526651, 0.16769287020109722, -0.3122851919561247, 0.14459232175502748, 0.16687797147385053, -0.31224722662440524, 0.1453692551505547, 0.1661692094313458, -0.31221636615811377, 0.14604715672676796, 0.16554712362301016, -0.31219094247245965, 0.1466438188494495, 0.1649967355821549, -0.31216974972796485, 0.14717301414580997, 0.16450632911392388, -0.31215189873417737, 0.14764556962025352, -0.14807011393514496, 0.14807011393514496], "row_indices": [1, 0, 2, 1, 0, 3, 2, 1, 4, 3, 2, 5, 4, 3, 6, 5, 4, 7, 6, 5, 8, 7, 6, 9, 8, 7, 10, 9, 8, 11, 10, 9, 12, 11, 10, 13, 12, 11, 14, 13, 12, 15, 14, 13, 16, 15, 14, 17, 16, 15, 18, 17, 16, 19, 18, 17, 19, 18, 21, 20, 22, 21, 20, 23, 22, 21, 24, 23, 22, 25, 24, 23, 26, 25, 24, 27, 26, 25, 28, 27, 26, 29, 28, 27, 30, 29, 28, 31, 30, 29, 32, 31, 30, 33, 32, 31, 34, 33, 32, 35, 34, 33, 36, 35, 34, 37, 36, 35, 38, 37, 36, 39, 38, 37, 39, 38, 41, 40, 42, 41, 40, 43, 42, 41, 44, 43, 42, 45, 44, 43, 46, 45, 44, 47, 46, 45, 48, 47, 46, 49, 48, 47, 50, 49, 48, 51, 50, 49, 52, 51, 50, 53, 52, 51, 54, 53, 52, 55, 54, 53, 56, 55, 54, 57, 56, 55, 58, 57, 56, 59, 58, 57, 59, 58, 61, 60, 62, 61, 60, 63, 62, 61, 64, 63, 62, 65, 64, 63, 66, 65, 64, 67, 66, 65, 68, 67, 66, 69, 68, 67, 70, 69, 68, 71, 70, 69, 72, 71, 70, 73, 72, 71, 74, 73, 72, 75, 74, 73, 76, 75, 74, 77, 76, 75, 78, 77, 76, 79, 78, 77, 79, 78, 81, 80, 82, 81, 80, 83, 82, 81, 84, 83, 82, 85, 84, 83, 86, 85, 84, 87, 86, 85, 88, 87, 86, 89, 88, 87, 90, 89, 88, 91, 90, 89, 92, 91, 90, 93, 92, 91, 94, 93, 92, 95, 94, 93, 96, 95, 94, 97, 96, 95, 98, 97, 96, 99, 98, 97, 99, 98, 101, 100, 102, 101, 100, 103, 102, 101, 104, 103, 102, 105, 104, 103, 106, 105, 104, 107, 106, 105, 108, 107, 106, 109, 108, 107, 110, 109, 108, 111, 110, 109, 112, 111, 110, 113, 112, 111, 114, 113, 112, 115, 114, 113, 116, 115, 114, 117, 116, 115, 118, 117, 116, 119, 118, 117, 119, 118, 121, 120, 122, 121, 120, 123, 122, 121, 124, 123, 122, 125, 124, 123, 126, 125, 124, 127, 126, 125, 128, 127, 126, 129, 128, 127, 130, 129, 128, 131, 130, 129, 132, 131, 130, 133, 132, 131, 134, 133, 132, 135, 134, 133, 136, 135, 134, 137, 136, 135, 138, 137, 136, 139, 138, 137, 139, 138, 141, 140, 142, 141, 140, 143, 142, 141, 144, 143, 142, 145, 144, 143, 146, 145, 144, 147, 146, 145, 148, 147, 146, 149, 148, 147, 150, 149, 148, 151, 150, 149, 152, 151, 150, 153, 152, 151, 154, 153, 152, 155, 154, 153, 156, 155, 154, 157, 156, 155, 158, 157, 156, 159, 158, 157, 159, 158, 161, 160, 162, 161, 160, 163, 162, 161, 164, 163, 162, 165, 164, 163, 166, 165, 164, 167, 166, 165, 168, 167, 166, 169, 168, 167, 170, 169, 168, 171, 170, 169, 172, 171, 170, 173, 172, 171, 174, 173, 172, 175, 174, 173, 176, 175, 174, 177, 176, 175, 178, 177, 176, 179, 178, 177, 179, 178, 181, 180, 182, 181, 180, 183, 182, 181, 184, 183, 182, 185, 184, 183, 186, 185, 184, 187, 186, 185, 188, 187, 186, 189, 188, 187, 190, 189, 188, 191, 190, 189, 192, 191, 190, 193, 192, 191, 194, 193, 192, 195, 194, 193, 196, 195, 194, 197, 196, 195, 198, 197, 196, 199, 198, 197, 199, 198, 201, 200, 202, 201, 200, 203, 202, 201, 204, 203, 202, 205, 204, 203, 206, 205, 204, 207, 206, 205, 208, 207, 206, 209, 208, 207, 210, 209, 208, 211, 210, 209, 212, 211, 210, 213, 212, 211, 214, 213, 212, 215, 214, 213, 216, 215, 214, 217, 216, 215, 218, 217, 216, 219, 218, 217, 219, 218, 221, 220, 222, 221, 220, 223, 222, 221, 224, 223, 222, 225, 224, 223, 226, 225, 224, 227, 226, 225, 228, 227, 226, 229, 228, 227, 230, 229, 228, 231, 230, 229, 232, 231, 230, 233, 232, 231, 234, 233, 232, 235, 234, 233, 236, 235, 234, 237, 236, 235, 238, 237, 236, 239, 238, 237, 239, 238, 241, 240, 242, 241, 240, 243, 242, 241, 244, 243, 242, 245, 244, 243, 246, 245, 244, 247, 246, 245, 248, 247, 246, 249, 248, 247, 250, 249, 248, 251, 250, 249, 252, 251, 250, 253, 252, 251, 254, 253, 252, 255, 254, 253, 256, 255, 254, 257, 256, 255, 258, 257, 256, 259, 258, 257, 259, 258, 261, 260, 262, 261, 260, 263, 262, 261, 264, 263, 262, 265, 264, 263, 266, 265, 264, 267, 266, 265, 268, 267, 266, 269, 268, 267, 270, 269, 268, 271, 270, 269, 272, 271, 270, 273, 272, 271, 274, 273, 272, 275, 274, 273, 276, 275, 274, 277, 276, 275, 278, 277, 276, 279, 278, 277, 279, 278, 281, 280, 282, 281, 280, 283, 282, 281, 284, 283, 282, 285, 284, 283, 286, 285, 284, 287, 286, 285, 288, 287, 286, 289, 288, 287, 290, 289, 288, 291, 290, 289, 292, 291, 290, 293, 292, 291, 294, 293, 292, 295, 294, 293, 296, 295, 294, 297, 296, 295, 298, 297, 296, 299, 298, 297, 299, 298, 301, 300, 302, 301, 300, 303, 302, 301, 304, 303, 302, 305, 304, 303, 306, 305, 304, 307, 306, 305, 308, 307, 306, 309, 308, 307, 310, 309, 308, 311, 310, 309, 312, 311, 310, 313, 312, 311, 314, 313, 312, 315, 314, 313, 316, 315, 314, 317, 316, 315, 318, 317, 316, 319, 318, 317, 319, 318, 321, 320, 322, 321, 320, 323, 322, 321, 324, 323, 322, 325, 324, 323, 326, 325, 324, 327, 326, 325, 328, 327, 326, 329, 328, 327, 330, 329, 328, 331, 330, 329, 332, 331, 330, 333, 332, 331, 334, 333, 332, 335, 334, 333, 336, 335, 334, 337, 336, 335, 338, 337, 336, 339, 338, 337, 339, 338, 341, 340, 342, 341, 340, 343, 342, 341, 344, 343, 342, 345, 344, 343, 346, 345, 344, 347, 346, 345, 348, 347, 346, 349, 348, 347, 350, 349, 348, 351, 350, 349, 352, 351, 350, 353, 352, 351, 354, 353, 352, 355, 354, 353, 356, 355, 354, 357, 356, 355, 358, 357, 356, 359, 358, 357, 359, 358, 361, 360, 362, 361, 360, 363, 362, 361, 364, 363, 362, 365, 364, 363, 366, 365, 364, 367, 366, 365, 368, 367, 366, 369, 368, 367, 370, 369, 368, 371, 370, 369, 372, 371, 370, 373, 372, 371, 374, 373, 372, 375, 374, 373, 376, 375, 374, 377, 376, 375, 378, 377, 376, 379, 378, 377, 379, 378, 381, 380, 382, 381, 380, 383, 382, 381, 384, 383, 382, 385, 384, 383, 386, 385, 384, 387, 386, 385, 388, 387, 386, 389, 388, 387, 390, 389, 388, 391, 390, 389, 392, 391, 390, 393, 392, 391, 394, 393, 392, 395, 394, 393, 396, 395, 394, 397, 396, 395, 398, 397, 396, 399, 398, 397, 399, 398], "column_pointers": [0, 2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 47, 50, 53, 56, 58, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99, 102, 105, 108, 111, 114, 116, 118, 121, 124, 127, 130, 133, 136, 139, 142, 145, 148, 151, 154, 157, 160, 163, 166, 169, 172, 174, 176, 179, 182, 185, 188, 191, 194, 197, 200, 203, 206, 209, 212, 215, 218, 221, 224, 227, 230, 232, 234, 237, 240, 243, 246, 249, 252, 255, 258, 261, 264, 267, 270, 273, 276, 279, 282, 285, 288, 290, 292, 295, 298, 301, 304, 307, 310, 313, 316, 319, 322, 325, 328, 331, 334, 337, 340, 343, 346, 348, 350, 353, 356, 359, 362, 365, 368, 371, 374, 377, 380, 383, 386, 389, 392, 395, 398, 401, 404, 406, 408, 411, 414, 417, 420, 423, 426, 429, 432, 435, 438, 441, 444, 447, 450, 453, 456, 459, 462, 464, 466, 469, 472, 475, 478, 481, 484, 487, 490, 493, 496, 499, 502, 505, 508, 511, 514, 517, 520, 522, 524, 527, 530, 533, 536, 539, 542, 545, 548, 551, 554, 557, 560, 563, 566, 569, 572, 575, 578, 580, 582, 585, 588, 591, 594, 597, 600, 603, 606, 609, 612, 615, 618, 621, 624, 627, 630, 633, 636, 638, 640, 643, 646, 649, 652, 655, 658, 661, 664, 667, 670, 673, 676, 679, 682, 685, 688, 691, 694, 696, 698, 701, 704, 707, 710, 713, 716, 719, 722, 725, 728, 731, 734, 737, 740, 743, 746, 749, 752, 754, 756, 759, 762, 765, 768, 771, 774, 777, 780, 783, 786, 789, 792, 795, 798, 801, 804, 807, 810, 812, 814, 817, 820, 823, 826, 829, 832, 835, 838, 841, 844, 847, 850, 853, 856, 859, 862, 865, 868, 870, 872, 875, 878, 881, 884, 887, 890, 893, 896, 899, 902, 905, 908, 911, 914, 917, 920, 923, 926, 928, 930, 933, 936, 939, 942, 945, 948, 951, 954, 957, 960, 963, 966, 969, 972, 975, 978, 981, 984, 986, 988, 991, 994, 997, 1000, 1003, 1006, 1009, 1012, 1015, 1018, 1021, 1024, 1027, 1030, 1033, 1036, 1039, 1042, 1044, 1046, 1049, 1052, 1055, 1058, 1061, 1064, 1067, 1070, 1073, 1076, 1079, 1082, 1085, 1088, 1091, 1094, 1097, 1100, 1102, 1104, 1107, 1110, 1113, 1116, 1119, 1122, 1125, 1128, 1131, 1134, 1137, 1140, 1143, 1146, 1149, 1152, 1155, 1158, 1160]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618810150608, "name": "@", "id": -1089011543740025122, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618810149600, "name": "Sparse Matrix (400, 20)", "id": -2558895362883503554, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [400, 20], "data": [-0.0008725998999302969, -0.0008725998999302969, -0.0008725998999302969, -0.0008725998999302969, -0.0008725998999302969, -0.0008725998999302969, -0.0008725998999302969, -0.0008725998999302969, -0.0008725998999302969, -0.0008725998999302969, -0.0008725998999302969, -0.0008725998999302969, -0.0008725998999302969, -0.0008725998999302969, -0.0008725998999302969, -0.0008725998999302969, -0.0008725998999302969, -0.0008725998999302969, -0.0008725998999302969, -0.0008725998999302969], "row_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "column_pointers": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20]}, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618813350160, "name": "*", "id": 5011301037419029294, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812691520, "name": "*", "id": 1616801225961756727, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812980144, "name": "2.0", "id": -5152612468232829164, "value": 2.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812691472, "name": "*", "id": 1550879348602589526, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812692048, "name": "*", "id": -8168648470131736160, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812694016, "name": "*", "id": 1489928314745703231, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813600240, "name": "2e-05", "id": 4013417785191156942, "value": 2e-05, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Power", "py/id": 130618812478624, "name": "**", "id": -2968840177917711684, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618813356496, "name": "maximum", "id": 1518251857377620986, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618813350112, "name": "*", "id": 1427763863586884248, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813350736, "name": "3333.3333333333335", "id": -6323253136627928067, "value": 3333.3333333333335, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618905580832, "name": "y[802:822]", "id": 7690233847097366697, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 802, "stop": 822, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812904896, "name": "1e-08", "id": 8264878393496015688, "value": 1e-08, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813599232, "name": "0.5", "id": 8689907665561100849, "value": 0.5, "children": []}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Power", "py/id": 130618812128176, "name": "**", "id": -4608803328745439545, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618816498048, "name": "maximum", "id": -1081378646585160925, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812321520, "name": "minimum", "id": -3863167891292241672, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812481456, "name": "@", "id": -7187558079876947875, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812692672, "name": "Sparse Matrix (20, 400)", "id": -6997513742234494012, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813597600, "name": "24983.261744011077", "id": 4240369327199516886, "value": 24983.261744011077, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813597936, "name": "0.000249832619938437", "id": 433485535404929403, "value": 0.000249832619938437, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813599232, "name": "0.5", "id": 8689907665561100849, "value": 0.5, "children": []}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Power", "py/id": 130618812682208, "name": "**", "id": -6925208073502469590, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812693344, "name": "-", "id": 7338248899687164424, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813360192, "name": "Maximum concentration in negative electrode [mol.m-3]", "id": 1403618475143340938, "value": 24983.2619938437, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618816498048, "name": "maximum", "id": -1081378646585160925, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812321520, "name": "minimum", "id": -3863167891292241672, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812481456, "name": "@", "id": -7187558079876947875, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812692672, "name": "Sparse Matrix (20, 400)", "id": -6997513742234494012, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813597600, "name": "24983.261744011077", "id": 4240369327199516886, "value": 24983.261744011077, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813597936, "name": "0.000249832619938437", "id": 433485535404929403, "value": 0.000249832619938437, "children": []}]}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813599232, "name": "0.5", "id": 8689907665561100849, "value": 0.5, "children": []}]}]}]}, {"py/object": "pybamm.expression_tree.functions.Sinh", "py/id": 130618893925744, "name": "function (sinh)", "id": -7417955762921766981, "function": "sinh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130619684477824, "name": "*", "id": -6377026607472615587, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618886457344, "name": "19.460872247804556", "id": 6066586310732700454, "value": 19.460872247804556, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812693680, "name": "-", "id": -3455383846556825401, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812690224, "name": "-", "id": 6531123047546519025, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812134416, "name": "y[862:882]", "id": 3768437392307318697, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 862, "stop": 882, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812690128, "name": "+", "id": -9057465236387790657, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813603360, "name": "-0.175189434028335", "id": 7119419765525498274, "value": -0.175189434028335, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812689744, "name": "y[902:922]", "id": 9166663523892018386, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 902, "stop": 922, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812693008, "name": "+", "id": 3170897706092531731, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812679328, "name": "+", "id": -2777145571203767738, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812747840, "name": "-", "id": -5660318420995079994, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812747216, "name": "-", "id": -8648600629949224676, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812746544, "name": "-", "id": -5891325346290398064, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812745872, "name": "-", "id": -3350222043601992656, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812745632, "name": "-", "id": 5457203170190986492, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812556704, "name": "-", "id": -4410910365300563589, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812684752, "name": "+", "id": -2628742156004538940, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812679808, "name": "+", "id": 2758625630139523814, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813605808, "name": "0.194", "id": 7740175521299642395, "value": 0.194, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812681584, "name": "*", "id": -3520860642976347259, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813606576, "name": "1.5", "id": 139763743454655332, "value": 1.5, "children": []}, {"py/object": "pybamm.expression_tree.functions.Exp", "py/id": 130618813768064, "name": "function (exp)", "id": -1991600572700148071, "function": "exp", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812681824, "name": "*", "id": -1142695973840209058, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813606096, "name": "-120.0", "id": -2666327541602118939, "value": -120.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812688832, "name": "*", "id": 1557036889693772453, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813606432, "name": "0.0351", "id": -6038329582079776216, "value": 0.0351, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812678896, "name": "function (tanh)", "id": 5845740464714440657, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812684800, "name": "+", "id": 5985495665387707307, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813602112, "name": "-3.44578313253012", "id": 8414662192146109933, "value": -3.44578313253012, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812679712, "name": "*", "id": -8867531115730044939, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813600096, "name": "12.048192771084336", "id": 2286773060606674287, "value": 12.048192771084336, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812556320, "name": "*", "id": 2987832948571782069, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813604944, "name": "0.0045", "id": -7336862686117729124, "value": 0.0045, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812680960, "name": "function (tanh)", "id": 1000424540452344079, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812688256, "name": "+", "id": 2500977860664972913, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813598128, "name": "-7.1344537815126055", "id": -2008027762916420739, "value": -7.1344537815126055, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812686192, "name": "*", "id": 6841719940451303636, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813599472, "name": "8.403361344537815", "id": 5137747773265705339, "value": 8.403361344537815, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812745488, "name": "*", "id": 2593665060573518236, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813600816, "name": "0.035", "id": 5340442218001158498, "value": 0.035, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812687536, "name": "function (tanh)", "id": 3525689365544371876, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812745296, "name": "+", "id": 7472497014997641358, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813363648, "name": "-18.466", "id": 2698408429651132352, "value": -18.466, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812744864, "name": "*", "id": 5236413183585979948, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813365904, "name": "20.0", "id": -2315749538005855916, "value": 20.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812745728, "name": "*", "id": -6222388883410834833, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813661360, "name": "0.0147", "id": 865196841519913110, "value": 0.0147, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812744144, "name": "function (tanh)", "id": -2237366335376051250, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812744288, "name": "+", "id": 737201374737237077, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813662512, "name": "-14.705882352941176", "id": 2973855845376108883, "value": -14.705882352941176, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812744816, "name": "*", "id": 1442672162688177164, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813662320, "name": "29.41176470588235", "id": -113256828160498776, "value": 29.41176470588235, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812746400, "name": "*", "id": -8458121232804279703, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813661552, "name": "0.102", "id": -1850981887219250428, "value": 0.102, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812745104, "name": "function (tanh)", "id": -3780828074974052996, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812746208, "name": "+", "id": 6961685620758259702, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813663760, "name": "-1.3661971830985917", "id": 7893090581833987542, "value": -1.3661971830985917, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812746064, "name": "*", "id": -1435395326191985150, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813663520, "name": "7.042253521126761", "id": -8437487278446070949, "value": 7.042253521126761, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812747072, "name": "*", "id": 5962223132358208642, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813664624, "name": "0.022", "id": -7588270992824822451, "value": 0.022, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812745968, "name": "function (tanh)", "id": -3444838196878594690, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812746880, "name": "+", "id": 7178807879491518423, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813664960, "name": "-54.8780487804878", "id": 336533465918387103, "value": -54.8780487804878, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812746736, "name": "*", "id": -3772427557061202442, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813664720, "name": "60.975609756097555", "id": -3846185782827536214, "value": 60.975609756097555, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812747696, "name": "*", "id": 8302701633561226124, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813665392, "name": "0.011", "id": 7061990918433917315, "value": 0.011, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812746640, "name": "function (tanh)", "id": -4667093808057287353, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812747552, "name": "+", "id": -333759140474274285, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813666304, "name": "-5.486725663716814", "id": 596050542444722654, "value": -5.486725663716814, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812747408, "name": "*", "id": 7931455061119874708, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813666064, "name": "44.24778761061947", "id": -8600761206958233429, "value": 44.24778761061947, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812681728, "name": "*", "id": 2663053549108018989, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813665776, "name": "0.0155", "id": 2465743936332173434, "value": 0.0155, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812132832, "name": "function (tanh)", "id": 2887192342577501511, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618880710208, "name": "+", "id": -7435334446882785747, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813667552, "name": "-3.6206896551724133", "id": 840276053350863505, "value": -3.6206896551724133, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812748032, "name": "*", "id": -3544537289702228274, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813667312, "name": "34.48275862068965", "id": -5637925993549098701, "value": 34.48275862068965, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812691328, "name": "*", "id": -7538571070900019829, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814229696, "name": "1e-06", "id": -2580769557222913764, "value": 1e-06, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812691760, "name": "+", "id": 7736217800210834407, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Division", "py/id": 130618812688544, "name": "/", "id": 8420292910285788713, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814315792, "name": "1.0", "id": -2100809710563135213, "value": 1.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Division", "py/id": 130618812689936, "name": "/", "id": -2317948313576916529, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814315792, "name": "1.0", "id": -2100809710563135213, "value": 1.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812690176, "name": "+", "id": -8577457382471511308, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130619696064528, "name": "-1.0", "id": -5413240934256496585, "value": -1.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618810145904, "name": "+", "id": 5675580939046189753, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618810147680, "name": "@", "id": 1906769002868584620, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618810146720, "name": "Sparse Matrix (400, 400)", "id": -3983573030629108388, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [400, 400], "data": [1.1999999999999997, -1.1999999999999997, 0.6857142857142855, -0.8571428571428568, 0.1714285714285714, 0.5684210526315789, -0.8210526315789474, 0.2526315789473683, 0.5189189189189185, -0.8108108108108104, 0.2918918918918919, 0.49180327868852414, -0.8065573770491796, 0.31475409836065543, 0.4747252747252752, -0.8043956043956048, 0.32967032967032955, 0.46299212598425177, -0.803149606299213, 0.34015748031496107, 0.45443786982248474, -0.8023668639053245, 0.34792899408283984, 0.4479262672811053, -0.8018433179723491, 0.35391705069124374, 0.4428044280442809, -0.8014760147601476, 0.35867158671586685, 0.43867069486404836, -0.8012084592145023, 0.362537764350454, 0.43526448362720355, -0.801007556675062, 0.36574307304785847, 0.43240938166311266, -0.800852878464818, 0.3684434968017054, 0.42998171846435196, -0.8007312614259608, 0.370749542961609, 0.4278922345483345, -0.8006339144215517, 0.37274167987321727, 0.4260748959778097, -0.8005547850208045, 0.37447988904299473, 0.42447980416156444, -0.8004895960832297, 0.3760097919216652, 0.4230685527747561, -0.8004352557127302, 0.3773667029379742, 0.42181110029211244, -0.800389483933788, 0.37857838364167556, -0.37966695880806406, 0.37966695880806406, 1.1999999999999997, -1.1999999999999997, 0.6857142857142855, -0.8571428571428568, 0.1714285714285714, 0.5684210526315789, -0.8210526315789474, 0.2526315789473683, 0.5189189189189185, -0.8108108108108104, 0.2918918918918919, 0.49180327868852414, -0.8065573770491796, 0.31475409836065543, 0.4747252747252752, -0.8043956043956048, 0.32967032967032955, 0.46299212598425177, -0.803149606299213, 0.34015748031496107, 0.45443786982248474, -0.8023668639053245, 0.34792899408283984, 0.4479262672811053, -0.8018433179723491, 0.35391705069124374, 0.4428044280442809, -0.8014760147601476, 0.35867158671586685, 0.43867069486404836, -0.8012084592145023, 0.362537764350454, 0.43526448362720355, -0.801007556675062, 0.36574307304785847, 0.43240938166311266, -0.800852878464818, 0.3684434968017054, 0.42998171846435196, -0.8007312614259608, 0.370749542961609, 0.4278922345483345, -0.8006339144215517, 0.37274167987321727, 0.4260748959778097, -0.8005547850208045, 0.37447988904299473, 0.42447980416156444, -0.8004895960832297, 0.3760097919216652, 0.4230685527747561, -0.8004352557127302, 0.3773667029379742, 0.42181110029211244, -0.800389483933788, 0.37857838364167556, -0.37966695880806406, 0.37966695880806406, 1.1999999999999997, -1.1999999999999997, 0.6857142857142855, -0.8571428571428568, 0.1714285714285714, 0.5684210526315789, -0.8210526315789474, 0.2526315789473683, 0.5189189189189185, -0.8108108108108104, 0.2918918918918919, 0.49180327868852414, -0.8065573770491796, 0.31475409836065543, 0.4747252747252752, -0.8043956043956048, 0.32967032967032955, 0.46299212598425177, -0.803149606299213, 0.34015748031496107, 0.45443786982248474, -0.8023668639053245, 0.34792899408283984, 0.4479262672811053, -0.8018433179723491, 0.35391705069124374, 0.4428044280442809, -0.8014760147601476, 0.35867158671586685, 0.43867069486404836, -0.8012084592145023, 0.362537764350454, 0.43526448362720355, -0.801007556675062, 0.36574307304785847, 0.43240938166311266, -0.800852878464818, 0.3684434968017054, 0.42998171846435196, -0.8007312614259608, 0.370749542961609, 0.4278922345483345, -0.8006339144215517, 0.37274167987321727, 0.4260748959778097, -0.8005547850208045, 0.37447988904299473, 0.42447980416156444, -0.8004895960832297, 0.3760097919216652, 0.4230685527747561, -0.8004352557127302, 0.3773667029379742, 0.42181110029211244, -0.800389483933788, 0.37857838364167556, -0.37966695880806406, 0.37966695880806406, 1.1999999999999997, -1.1999999999999997, 0.6857142857142855, -0.8571428571428568, 0.1714285714285714, 0.5684210526315789, -0.8210526315789474, 0.2526315789473683, 0.5189189189189185, -0.8108108108108104, 0.2918918918918919, 0.49180327868852414, -0.8065573770491796, 0.31475409836065543, 0.4747252747252752, -0.8043956043956048, 0.32967032967032955, 0.46299212598425177, -0.803149606299213, 0.34015748031496107, 0.45443786982248474, -0.8023668639053245, 0.34792899408283984, 0.4479262672811053, -0.8018433179723491, 0.35391705069124374, 0.4428044280442809, -0.8014760147601476, 0.35867158671586685, 0.43867069486404836, -0.8012084592145023, 0.362537764350454, 0.43526448362720355, -0.801007556675062, 0.36574307304785847, 0.43240938166311266, -0.800852878464818, 0.3684434968017054, 0.42998171846435196, -0.8007312614259608, 0.370749542961609, 0.4278922345483345, -0.8006339144215517, 0.37274167987321727, 0.4260748959778097, -0.8005547850208045, 0.37447988904299473, 0.42447980416156444, -0.8004895960832297, 0.3760097919216652, 0.4230685527747561, -0.8004352557127302, 0.3773667029379742, 0.42181110029211244, -0.800389483933788, 0.37857838364167556, -0.37966695880806406, 0.37966695880806406, 1.1999999999999997, -1.1999999999999997, 0.6857142857142855, -0.8571428571428568, 0.1714285714285714, 0.5684210526315789, -0.8210526315789474, 0.2526315789473683, 0.5189189189189185, -0.8108108108108104, 0.2918918918918919, 0.49180327868852414, -0.8065573770491796, 0.31475409836065543, 0.4747252747252752, -0.8043956043956048, 0.32967032967032955, 0.46299212598425177, -0.803149606299213, 0.34015748031496107, 0.45443786982248474, -0.8023668639053245, 0.34792899408283984, 0.4479262672811053, -0.8018433179723491, 0.35391705069124374, 0.4428044280442809, -0.8014760147601476, 0.35867158671586685, 0.43867069486404836, -0.8012084592145023, 0.362537764350454, 0.43526448362720355, -0.801007556675062, 0.36574307304785847, 0.43240938166311266, -0.800852878464818, 0.3684434968017054, 0.42998171846435196, -0.8007312614259608, 0.370749542961609, 0.4278922345483345, -0.8006339144215517, 0.37274167987321727, 0.4260748959778097, -0.8005547850208045, 0.37447988904299473, 0.42447980416156444, -0.8004895960832297, 0.3760097919216652, 0.4230685527747561, -0.8004352557127302, 0.3773667029379742, 0.42181110029211244, -0.800389483933788, 0.37857838364167556, -0.37966695880806406, 0.37966695880806406, 1.1999999999999997, -1.1999999999999997, 0.6857142857142855, -0.8571428571428568, 0.1714285714285714, 0.5684210526315789, -0.8210526315789474, 0.2526315789473683, 0.5189189189189185, -0.8108108108108104, 0.2918918918918919, 0.49180327868852414, -0.8065573770491796, 0.31475409836065543, 0.4747252747252752, -0.8043956043956048, 0.32967032967032955, 0.46299212598425177, -0.803149606299213, 0.34015748031496107, 0.45443786982248474, -0.8023668639053245, 0.34792899408283984, 0.4479262672811053, -0.8018433179723491, 0.35391705069124374, 0.4428044280442809, -0.8014760147601476, 0.35867158671586685, 0.43867069486404836, -0.8012084592145023, 0.362537764350454, 0.43526448362720355, -0.801007556675062, 0.36574307304785847, 0.43240938166311266, -0.800852878464818, 0.3684434968017054, 0.42998171846435196, -0.8007312614259608, 0.370749542961609, 0.4278922345483345, -0.8006339144215517, 0.37274167987321727, 0.4260748959778097, -0.8005547850208045, 0.37447988904299473, 0.42447980416156444, -0.8004895960832297, 0.3760097919216652, 0.4230685527747561, -0.8004352557127302, 0.3773667029379742, 0.42181110029211244, -0.800389483933788, 0.37857838364167556, -0.37966695880806406, 0.37966695880806406, 1.1999999999999997, -1.1999999999999997, 0.6857142857142855, -0.8571428571428568, 0.1714285714285714, 0.5684210526315789, -0.8210526315789474, 0.2526315789473683, 0.5189189189189185, -0.8108108108108104, 0.2918918918918919, 0.49180327868852414, -0.8065573770491796, 0.31475409836065543, 0.4747252747252752, -0.8043956043956048, 0.32967032967032955, 0.46299212598425177, -0.803149606299213, 0.34015748031496107, 0.45443786982248474, -0.8023668639053245, 0.34792899408283984, 0.4479262672811053, -0.8018433179723491, 0.35391705069124374, 0.4428044280442809, -0.8014760147601476, 0.35867158671586685, 0.43867069486404836, -0.8012084592145023, 0.362537764350454, 0.43526448362720355, -0.801007556675062, 0.36574307304785847, 0.43240938166311266, -0.800852878464818, 0.3684434968017054, 0.42998171846435196, -0.8007312614259608, 0.370749542961609, 0.4278922345483345, -0.8006339144215517, 0.37274167987321727, 0.4260748959778097, -0.8005547850208045, 0.37447988904299473, 0.42447980416156444, -0.8004895960832297, 0.3760097919216652, 0.4230685527747561, -0.8004352557127302, 0.3773667029379742, 0.42181110029211244, -0.800389483933788, 0.37857838364167556, -0.37966695880806406, 0.37966695880806406, 1.1999999999999997, -1.1999999999999997, 0.6857142857142855, -0.8571428571428568, 0.1714285714285714, 0.5684210526315789, -0.8210526315789474, 0.2526315789473683, 0.5189189189189185, -0.8108108108108104, 0.2918918918918919, 0.49180327868852414, -0.8065573770491796, 0.31475409836065543, 0.4747252747252752, -0.8043956043956048, 0.32967032967032955, 0.46299212598425177, -0.803149606299213, 0.34015748031496107, 0.45443786982248474, -0.8023668639053245, 0.34792899408283984, 0.4479262672811053, -0.8018433179723491, 0.35391705069124374, 0.4428044280442809, -0.8014760147601476, 0.35867158671586685, 0.43867069486404836, -0.8012084592145023, 0.362537764350454, 0.43526448362720355, -0.801007556675062, 0.36574307304785847, 0.43240938166311266, -0.800852878464818, 0.3684434968017054, 0.42998171846435196, -0.8007312614259608, 0.370749542961609, 0.4278922345483345, -0.8006339144215517, 0.37274167987321727, 0.4260748959778097, -0.8005547850208045, 0.37447988904299473, 0.42447980416156444, -0.8004895960832297, 0.3760097919216652, 0.4230685527747561, -0.8004352557127302, 0.3773667029379742, 0.42181110029211244, -0.800389483933788, 0.37857838364167556, -0.37966695880806406, 0.37966695880806406, 1.1999999999999997, -1.1999999999999997, 0.6857142857142855, -0.8571428571428568, 0.1714285714285714, 0.5684210526315789, -0.8210526315789474, 0.2526315789473683, 0.5189189189189185, -0.8108108108108104, 0.2918918918918919, 0.49180327868852414, -0.8065573770491796, 0.31475409836065543, 0.4747252747252752, -0.8043956043956048, 0.32967032967032955, 0.46299212598425177, -0.803149606299213, 0.34015748031496107, 0.45443786982248474, -0.8023668639053245, 0.34792899408283984, 0.4479262672811053, -0.8018433179723491, 0.35391705069124374, 0.4428044280442809, -0.8014760147601476, 0.35867158671586685, 0.43867069486404836, -0.8012084592145023, 0.362537764350454, 0.43526448362720355, -0.801007556675062, 0.36574307304785847, 0.43240938166311266, -0.800852878464818, 0.3684434968017054, 0.42998171846435196, -0.8007312614259608, 0.370749542961609, 0.4278922345483345, -0.8006339144215517, 0.37274167987321727, 0.4260748959778097, -0.8005547850208045, 0.37447988904299473, 0.42447980416156444, -0.8004895960832297, 0.3760097919216652, 0.4230685527747561, -0.8004352557127302, 0.3773667029379742, 0.42181110029211244, -0.800389483933788, 0.37857838364167556, -0.37966695880806406, 0.37966695880806406, 1.1999999999999997, -1.1999999999999997, 0.6857142857142855, -0.8571428571428568, 0.1714285714285714, 0.5684210526315789, -0.8210526315789474, 0.2526315789473683, 0.5189189189189185, -0.8108108108108104, 0.2918918918918919, 0.49180327868852414, -0.8065573770491796, 0.31475409836065543, 0.4747252747252752, -0.8043956043956048, 0.32967032967032955, 0.46299212598425177, -0.803149606299213, 0.34015748031496107, 0.45443786982248474, -0.8023668639053245, 0.34792899408283984, 0.4479262672811053, -0.8018433179723491, 0.35391705069124374, 0.4428044280442809, -0.8014760147601476, 0.35867158671586685, 0.43867069486404836, -0.8012084592145023, 0.362537764350454, 0.43526448362720355, -0.801007556675062, 0.36574307304785847, 0.43240938166311266, -0.800852878464818, 0.3684434968017054, 0.42998171846435196, -0.8007312614259608, 0.370749542961609, 0.4278922345483345, -0.8006339144215517, 0.37274167987321727, 0.4260748959778097, -0.8005547850208045, 0.37447988904299473, 0.42447980416156444, -0.8004895960832297, 0.3760097919216652, 0.4230685527747561, -0.8004352557127302, 0.3773667029379742, 0.42181110029211244, -0.800389483933788, 0.37857838364167556, -0.37966695880806406, 0.37966695880806406, 1.1999999999999997, -1.1999999999999997, 0.6857142857142855, -0.8571428571428568, 0.1714285714285714, 0.5684210526315789, -0.8210526315789474, 0.2526315789473683, 0.5189189189189185, -0.8108108108108104, 0.2918918918918919, 0.49180327868852414, -0.8065573770491796, 0.31475409836065543, 0.4747252747252752, -0.8043956043956048, 0.32967032967032955, 0.46299212598425177, -0.803149606299213, 0.34015748031496107, 0.45443786982248474, -0.8023668639053245, 0.34792899408283984, 0.4479262672811053, -0.8018433179723491, 0.35391705069124374, 0.4428044280442809, -0.8014760147601476, 0.35867158671586685, 0.43867069486404836, -0.8012084592145023, 0.362537764350454, 0.43526448362720355, -0.801007556675062, 0.36574307304785847, 0.43240938166311266, -0.800852878464818, 0.3684434968017054, 0.42998171846435196, -0.8007312614259608, 0.370749542961609, 0.4278922345483345, -0.8006339144215517, 0.37274167987321727, 0.4260748959778097, -0.8005547850208045, 0.37447988904299473, 0.42447980416156444, -0.8004895960832297, 0.3760097919216652, 0.4230685527747561, -0.8004352557127302, 0.3773667029379742, 0.42181110029211244, -0.800389483933788, 0.37857838364167556, -0.37966695880806406, 0.37966695880806406, 1.1999999999999997, -1.1999999999999997, 0.6857142857142855, -0.8571428571428568, 0.1714285714285714, 0.5684210526315789, -0.8210526315789474, 0.2526315789473683, 0.5189189189189185, -0.8108108108108104, 0.2918918918918919, 0.49180327868852414, -0.8065573770491796, 0.31475409836065543, 0.4747252747252752, -0.8043956043956048, 0.32967032967032955, 0.46299212598425177, -0.803149606299213, 0.34015748031496107, 0.45443786982248474, -0.8023668639053245, 0.34792899408283984, 0.4479262672811053, -0.8018433179723491, 0.35391705069124374, 0.4428044280442809, -0.8014760147601476, 0.35867158671586685, 0.43867069486404836, -0.8012084592145023, 0.362537764350454, 0.43526448362720355, -0.801007556675062, 0.36574307304785847, 0.43240938166311266, -0.800852878464818, 0.3684434968017054, 0.42998171846435196, -0.8007312614259608, 0.370749542961609, 0.4278922345483345, -0.8006339144215517, 0.37274167987321727, 0.4260748959778097, -0.8005547850208045, 0.37447988904299473, 0.42447980416156444, -0.8004895960832297, 0.3760097919216652, 0.4230685527747561, -0.8004352557127302, 0.3773667029379742, 0.42181110029211244, -0.800389483933788, 0.37857838364167556, -0.37966695880806406, 0.37966695880806406, 1.1999999999999997, -1.1999999999999997, 0.6857142857142855, -0.8571428571428568, 0.1714285714285714, 0.5684210526315789, -0.8210526315789474, 0.2526315789473683, 0.5189189189189185, -0.8108108108108104, 0.2918918918918919, 0.49180327868852414, -0.8065573770491796, 0.31475409836065543, 0.4747252747252752, -0.8043956043956048, 0.32967032967032955, 0.46299212598425177, -0.803149606299213, 0.34015748031496107, 0.45443786982248474, -0.8023668639053245, 0.34792899408283984, 0.4479262672811053, -0.8018433179723491, 0.35391705069124374, 0.4428044280442809, -0.8014760147601476, 0.35867158671586685, 0.43867069486404836, -0.8012084592145023, 0.362537764350454, 0.43526448362720355, -0.801007556675062, 0.36574307304785847, 0.43240938166311266, -0.800852878464818, 0.3684434968017054, 0.42998171846435196, -0.8007312614259608, 0.370749542961609, 0.4278922345483345, -0.8006339144215517, 0.37274167987321727, 0.4260748959778097, -0.8005547850208045, 0.37447988904299473, 0.42447980416156444, -0.8004895960832297, 0.3760097919216652, 0.4230685527747561, -0.8004352557127302, 0.3773667029379742, 0.42181110029211244, -0.800389483933788, 0.37857838364167556, -0.37966695880806406, 0.37966695880806406, 1.1999999999999997, -1.1999999999999997, 0.6857142857142855, -0.8571428571428568, 0.1714285714285714, 0.5684210526315789, -0.8210526315789474, 0.2526315789473683, 0.5189189189189185, -0.8108108108108104, 0.2918918918918919, 0.49180327868852414, -0.8065573770491796, 0.31475409836065543, 0.4747252747252752, -0.8043956043956048, 0.32967032967032955, 0.46299212598425177, -0.803149606299213, 0.34015748031496107, 0.45443786982248474, -0.8023668639053245, 0.34792899408283984, 0.4479262672811053, -0.8018433179723491, 0.35391705069124374, 0.4428044280442809, -0.8014760147601476, 0.35867158671586685, 0.43867069486404836, -0.8012084592145023, 0.362537764350454, 0.43526448362720355, -0.801007556675062, 0.36574307304785847, 0.43240938166311266, -0.800852878464818, 0.3684434968017054, 0.42998171846435196, -0.8007312614259608, 0.370749542961609, 0.4278922345483345, -0.8006339144215517, 0.37274167987321727, 0.4260748959778097, -0.8005547850208045, 0.37447988904299473, 0.42447980416156444, -0.8004895960832297, 0.3760097919216652, 0.4230685527747561, -0.8004352557127302, 0.3773667029379742, 0.42181110029211244, -0.800389483933788, 0.37857838364167556, -0.37966695880806406, 0.37966695880806406, 1.1999999999999997, -1.1999999999999997, 0.6857142857142855, -0.8571428571428568, 0.1714285714285714, 0.5684210526315789, -0.8210526315789474, 0.2526315789473683, 0.5189189189189185, -0.8108108108108104, 0.2918918918918919, 0.49180327868852414, -0.8065573770491796, 0.31475409836065543, 0.4747252747252752, -0.8043956043956048, 0.32967032967032955, 0.46299212598425177, -0.803149606299213, 0.34015748031496107, 0.45443786982248474, -0.8023668639053245, 0.34792899408283984, 0.4479262672811053, -0.8018433179723491, 0.35391705069124374, 0.4428044280442809, -0.8014760147601476, 0.35867158671586685, 0.43867069486404836, -0.8012084592145023, 0.362537764350454, 0.43526448362720355, -0.801007556675062, 0.36574307304785847, 0.43240938166311266, -0.800852878464818, 0.3684434968017054, 0.42998171846435196, -0.8007312614259608, 0.370749542961609, 0.4278922345483345, -0.8006339144215517, 0.37274167987321727, 0.4260748959778097, -0.8005547850208045, 0.37447988904299473, 0.42447980416156444, -0.8004895960832297, 0.3760097919216652, 0.4230685527747561, -0.8004352557127302, 0.3773667029379742, 0.42181110029211244, -0.800389483933788, 0.37857838364167556, -0.37966695880806406, 0.37966695880806406, 1.1999999999999997, -1.1999999999999997, 0.6857142857142855, -0.8571428571428568, 0.1714285714285714, 0.5684210526315789, -0.8210526315789474, 0.2526315789473683, 0.5189189189189185, -0.8108108108108104, 0.2918918918918919, 0.49180327868852414, -0.8065573770491796, 0.31475409836065543, 0.4747252747252752, -0.8043956043956048, 0.32967032967032955, 0.46299212598425177, -0.803149606299213, 0.34015748031496107, 0.45443786982248474, -0.8023668639053245, 0.34792899408283984, 0.4479262672811053, -0.8018433179723491, 0.35391705069124374, 0.4428044280442809, -0.8014760147601476, 0.35867158671586685, 0.43867069486404836, -0.8012084592145023, 0.362537764350454, 0.43526448362720355, -0.801007556675062, 0.36574307304785847, 0.43240938166311266, -0.800852878464818, 0.3684434968017054, 0.42998171846435196, -0.8007312614259608, 0.370749542961609, 0.4278922345483345, -0.8006339144215517, 0.37274167987321727, 0.4260748959778097, -0.8005547850208045, 0.37447988904299473, 0.42447980416156444, -0.8004895960832297, 0.3760097919216652, 0.4230685527747561, -0.8004352557127302, 0.3773667029379742, 0.42181110029211244, -0.800389483933788, 0.37857838364167556, -0.37966695880806406, 0.37966695880806406, 1.1999999999999997, -1.1999999999999997, 0.6857142857142855, -0.8571428571428568, 0.1714285714285714, 0.5684210526315789, -0.8210526315789474, 0.2526315789473683, 0.5189189189189185, -0.8108108108108104, 0.2918918918918919, 0.49180327868852414, -0.8065573770491796, 0.31475409836065543, 0.4747252747252752, -0.8043956043956048, 0.32967032967032955, 0.46299212598425177, -0.803149606299213, 0.34015748031496107, 0.45443786982248474, -0.8023668639053245, 0.34792899408283984, 0.4479262672811053, -0.8018433179723491, 0.35391705069124374, 0.4428044280442809, -0.8014760147601476, 0.35867158671586685, 0.43867069486404836, -0.8012084592145023, 0.362537764350454, 0.43526448362720355, -0.801007556675062, 0.36574307304785847, 0.43240938166311266, -0.800852878464818, 0.3684434968017054, 0.42998171846435196, -0.8007312614259608, 0.370749542961609, 0.4278922345483345, -0.8006339144215517, 0.37274167987321727, 0.4260748959778097, -0.8005547850208045, 0.37447988904299473, 0.42447980416156444, -0.8004895960832297, 0.3760097919216652, 0.4230685527747561, -0.8004352557127302, 0.3773667029379742, 0.42181110029211244, -0.800389483933788, 0.37857838364167556, -0.37966695880806406, 0.37966695880806406, 1.1999999999999997, -1.1999999999999997, 0.6857142857142855, -0.8571428571428568, 0.1714285714285714, 0.5684210526315789, -0.8210526315789474, 0.2526315789473683, 0.5189189189189185, -0.8108108108108104, 0.2918918918918919, 0.49180327868852414, -0.8065573770491796, 0.31475409836065543, 0.4747252747252752, -0.8043956043956048, 0.32967032967032955, 0.46299212598425177, -0.803149606299213, 0.34015748031496107, 0.45443786982248474, -0.8023668639053245, 0.34792899408283984, 0.4479262672811053, -0.8018433179723491, 0.35391705069124374, 0.4428044280442809, -0.8014760147601476, 0.35867158671586685, 0.43867069486404836, -0.8012084592145023, 0.362537764350454, 0.43526448362720355, -0.801007556675062, 0.36574307304785847, 0.43240938166311266, -0.800852878464818, 0.3684434968017054, 0.42998171846435196, -0.8007312614259608, 0.370749542961609, 0.4278922345483345, -0.8006339144215517, 0.37274167987321727, 0.4260748959778097, -0.8005547850208045, 0.37447988904299473, 0.42447980416156444, -0.8004895960832297, 0.3760097919216652, 0.4230685527747561, -0.8004352557127302, 0.3773667029379742, 0.42181110029211244, -0.800389483933788, 0.37857838364167556, -0.37966695880806406, 0.37966695880806406, 1.1999999999999997, -1.1999999999999997, 0.6857142857142855, -0.8571428571428568, 0.1714285714285714, 0.5684210526315789, -0.8210526315789474, 0.2526315789473683, 0.5189189189189185, -0.8108108108108104, 0.2918918918918919, 0.49180327868852414, -0.8065573770491796, 0.31475409836065543, 0.4747252747252752, -0.8043956043956048, 0.32967032967032955, 0.46299212598425177, -0.803149606299213, 0.34015748031496107, 0.45443786982248474, -0.8023668639053245, 0.34792899408283984, 0.4479262672811053, -0.8018433179723491, 0.35391705069124374, 0.4428044280442809, -0.8014760147601476, 0.35867158671586685, 0.43867069486404836, -0.8012084592145023, 0.362537764350454, 0.43526448362720355, -0.801007556675062, 0.36574307304785847, 0.43240938166311266, -0.800852878464818, 0.3684434968017054, 0.42998171846435196, -0.8007312614259608, 0.370749542961609, 0.4278922345483345, -0.8006339144215517, 0.37274167987321727, 0.4260748959778097, -0.8005547850208045, 0.37447988904299473, 0.42447980416156444, -0.8004895960832297, 0.3760097919216652, 0.4230685527747561, -0.8004352557127302, 0.3773667029379742, 0.42181110029211244, -0.800389483933788, 0.37857838364167556, -0.37966695880806406, 0.37966695880806406, 1.1999999999999997, -1.1999999999999997, 0.6857142857142855, -0.8571428571428568, 0.1714285714285714, 0.5684210526315789, -0.8210526315789474, 0.2526315789473683, 0.5189189189189185, -0.8108108108108104, 0.2918918918918919, 0.49180327868852414, -0.8065573770491796, 0.31475409836065543, 0.4747252747252752, -0.8043956043956048, 0.32967032967032955, 0.46299212598425177, -0.803149606299213, 0.34015748031496107, 0.45443786982248474, -0.8023668639053245, 0.34792899408283984, 0.4479262672811053, -0.8018433179723491, 0.35391705069124374, 0.4428044280442809, -0.8014760147601476, 0.35867158671586685, 0.43867069486404836, -0.8012084592145023, 0.362537764350454, 0.43526448362720355, -0.801007556675062, 0.36574307304785847, 0.43240938166311266, -0.800852878464818, 0.3684434968017054, 0.42998171846435196, -0.8007312614259608, 0.370749542961609, 0.4278922345483345, -0.8006339144215517, 0.37274167987321727, 0.4260748959778097, -0.8005547850208045, 0.37447988904299473, 0.42447980416156444, -0.8004895960832297, 0.3760097919216652, 0.4230685527747561, -0.8004352557127302, 0.3773667029379742, 0.42181110029211244, -0.800389483933788, 0.37857838364167556, -0.37966695880806406, 0.37966695880806406], "row_indices": [1, 0, 2, 1, 0, 3, 2, 1, 4, 3, 2, 5, 4, 3, 6, 5, 4, 7, 6, 5, 8, 7, 6, 9, 8, 7, 10, 9, 8, 11, 10, 9, 12, 11, 10, 13, 12, 11, 14, 13, 12, 15, 14, 13, 16, 15, 14, 17, 16, 15, 18, 17, 16, 19, 18, 17, 19, 18, 21, 20, 22, 21, 20, 23, 22, 21, 24, 23, 22, 25, 24, 23, 26, 25, 24, 27, 26, 25, 28, 27, 26, 29, 28, 27, 30, 29, 28, 31, 30, 29, 32, 31, 30, 33, 32, 31, 34, 33, 32, 35, 34, 33, 36, 35, 34, 37, 36, 35, 38, 37, 36, 39, 38, 37, 39, 38, 41, 40, 42, 41, 40, 43, 42, 41, 44, 43, 42, 45, 44, 43, 46, 45, 44, 47, 46, 45, 48, 47, 46, 49, 48, 47, 50, 49, 48, 51, 50, 49, 52, 51, 50, 53, 52, 51, 54, 53, 52, 55, 54, 53, 56, 55, 54, 57, 56, 55, 58, 57, 56, 59, 58, 57, 59, 58, 61, 60, 62, 61, 60, 63, 62, 61, 64, 63, 62, 65, 64, 63, 66, 65, 64, 67, 66, 65, 68, 67, 66, 69, 68, 67, 70, 69, 68, 71, 70, 69, 72, 71, 70, 73, 72, 71, 74, 73, 72, 75, 74, 73, 76, 75, 74, 77, 76, 75, 78, 77, 76, 79, 78, 77, 79, 78, 81, 80, 82, 81, 80, 83, 82, 81, 84, 83, 82, 85, 84, 83, 86, 85, 84, 87, 86, 85, 88, 87, 86, 89, 88, 87, 90, 89, 88, 91, 90, 89, 92, 91, 90, 93, 92, 91, 94, 93, 92, 95, 94, 93, 96, 95, 94, 97, 96, 95, 98, 97, 96, 99, 98, 97, 99, 98, 101, 100, 102, 101, 100, 103, 102, 101, 104, 103, 102, 105, 104, 103, 106, 105, 104, 107, 106, 105, 108, 107, 106, 109, 108, 107, 110, 109, 108, 111, 110, 109, 112, 111, 110, 113, 112, 111, 114, 113, 112, 115, 114, 113, 116, 115, 114, 117, 116, 115, 118, 117, 116, 119, 118, 117, 119, 118, 121, 120, 122, 121, 120, 123, 122, 121, 124, 123, 122, 125, 124, 123, 126, 125, 124, 127, 126, 125, 128, 127, 126, 129, 128, 127, 130, 129, 128, 131, 130, 129, 132, 131, 130, 133, 132, 131, 134, 133, 132, 135, 134, 133, 136, 135, 134, 137, 136, 135, 138, 137, 136, 139, 138, 137, 139, 138, 141, 140, 142, 141, 140, 143, 142, 141, 144, 143, 142, 145, 144, 143, 146, 145, 144, 147, 146, 145, 148, 147, 146, 149, 148, 147, 150, 149, 148, 151, 150, 149, 152, 151, 150, 153, 152, 151, 154, 153, 152, 155, 154, 153, 156, 155, 154, 157, 156, 155, 158, 157, 156, 159, 158, 157, 159, 158, 161, 160, 162, 161, 160, 163, 162, 161, 164, 163, 162, 165, 164, 163, 166, 165, 164, 167, 166, 165, 168, 167, 166, 169, 168, 167, 170, 169, 168, 171, 170, 169, 172, 171, 170, 173, 172, 171, 174, 173, 172, 175, 174, 173, 176, 175, 174, 177, 176, 175, 178, 177, 176, 179, 178, 177, 179, 178, 181, 180, 182, 181, 180, 183, 182, 181, 184, 183, 182, 185, 184, 183, 186, 185, 184, 187, 186, 185, 188, 187, 186, 189, 188, 187, 190, 189, 188, 191, 190, 189, 192, 191, 190, 193, 192, 191, 194, 193, 192, 195, 194, 193, 196, 195, 194, 197, 196, 195, 198, 197, 196, 199, 198, 197, 199, 198, 201, 200, 202, 201, 200, 203, 202, 201, 204, 203, 202, 205, 204, 203, 206, 205, 204, 207, 206, 205, 208, 207, 206, 209, 208, 207, 210, 209, 208, 211, 210, 209, 212, 211, 210, 213, 212, 211, 214, 213, 212, 215, 214, 213, 216, 215, 214, 217, 216, 215, 218, 217, 216, 219, 218, 217, 219, 218, 221, 220, 222, 221, 220, 223, 222, 221, 224, 223, 222, 225, 224, 223, 226, 225, 224, 227, 226, 225, 228, 227, 226, 229, 228, 227, 230, 229, 228, 231, 230, 229, 232, 231, 230, 233, 232, 231, 234, 233, 232, 235, 234, 233, 236, 235, 234, 237, 236, 235, 238, 237, 236, 239, 238, 237, 239, 238, 241, 240, 242, 241, 240, 243, 242, 241, 244, 243, 242, 245, 244, 243, 246, 245, 244, 247, 246, 245, 248, 247, 246, 249, 248, 247, 250, 249, 248, 251, 250, 249, 252, 251, 250, 253, 252, 251, 254, 253, 252, 255, 254, 253, 256, 255, 254, 257, 256, 255, 258, 257, 256, 259, 258, 257, 259, 258, 261, 260, 262, 261, 260, 263, 262, 261, 264, 263, 262, 265, 264, 263, 266, 265, 264, 267, 266, 265, 268, 267, 266, 269, 268, 267, 270, 269, 268, 271, 270, 269, 272, 271, 270, 273, 272, 271, 274, 273, 272, 275, 274, 273, 276, 275, 274, 277, 276, 275, 278, 277, 276, 279, 278, 277, 279, 278, 281, 280, 282, 281, 280, 283, 282, 281, 284, 283, 282, 285, 284, 283, 286, 285, 284, 287, 286, 285, 288, 287, 286, 289, 288, 287, 290, 289, 288, 291, 290, 289, 292, 291, 290, 293, 292, 291, 294, 293, 292, 295, 294, 293, 296, 295, 294, 297, 296, 295, 298, 297, 296, 299, 298, 297, 299, 298, 301, 300, 302, 301, 300, 303, 302, 301, 304, 303, 302, 305, 304, 303, 306, 305, 304, 307, 306, 305, 308, 307, 306, 309, 308, 307, 310, 309, 308, 311, 310, 309, 312, 311, 310, 313, 312, 311, 314, 313, 312, 315, 314, 313, 316, 315, 314, 317, 316, 315, 318, 317, 316, 319, 318, 317, 319, 318, 321, 320, 322, 321, 320, 323, 322, 321, 324, 323, 322, 325, 324, 323, 326, 325, 324, 327, 326, 325, 328, 327, 326, 329, 328, 327, 330, 329, 328, 331, 330, 329, 332, 331, 330, 333, 332, 331, 334, 333, 332, 335, 334, 333, 336, 335, 334, 337, 336, 335, 338, 337, 336, 339, 338, 337, 339, 338, 341, 340, 342, 341, 340, 343, 342, 341, 344, 343, 342, 345, 344, 343, 346, 345, 344, 347, 346, 345, 348, 347, 346, 349, 348, 347, 350, 349, 348, 351, 350, 349, 352, 351, 350, 353, 352, 351, 354, 353, 352, 355, 354, 353, 356, 355, 354, 357, 356, 355, 358, 357, 356, 359, 358, 357, 359, 358, 361, 360, 362, 361, 360, 363, 362, 361, 364, 363, 362, 365, 364, 363, 366, 365, 364, 367, 366, 365, 368, 367, 366, 369, 368, 367, 370, 369, 368, 371, 370, 369, 372, 371, 370, 373, 372, 371, 374, 373, 372, 375, 374, 373, 376, 375, 374, 377, 376, 375, 378, 377, 376, 379, 378, 377, 379, 378, 381, 380, 382, 381, 380, 383, 382, 381, 384, 383, 382, 385, 384, 383, 386, 385, 384, 387, 386, 385, 388, 387, 386, 389, 388, 387, 390, 389, 388, 391, 390, 389, 392, 391, 390, 393, 392, 391, 394, 393, 392, 395, 394, 393, 396, 395, 394, 397, 396, 395, 398, 397, 396, 399, 398, 397, 399, 398], "column_pointers": [0, 2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 47, 50, 53, 56, 58, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96, 99, 102, 105, 108, 111, 114, 116, 118, 121, 124, 127, 130, 133, 136, 139, 142, 145, 148, 151, 154, 157, 160, 163, 166, 169, 172, 174, 176, 179, 182, 185, 188, 191, 194, 197, 200, 203, 206, 209, 212, 215, 218, 221, 224, 227, 230, 232, 234, 237, 240, 243, 246, 249, 252, 255, 258, 261, 264, 267, 270, 273, 276, 279, 282, 285, 288, 290, 292, 295, 298, 301, 304, 307, 310, 313, 316, 319, 322, 325, 328, 331, 334, 337, 340, 343, 346, 348, 350, 353, 356, 359, 362, 365, 368, 371, 374, 377, 380, 383, 386, 389, 392, 395, 398, 401, 404, 406, 408, 411, 414, 417, 420, 423, 426, 429, 432, 435, 438, 441, 444, 447, 450, 453, 456, 459, 462, 464, 466, 469, 472, 475, 478, 481, 484, 487, 490, 493, 496, 499, 502, 505, 508, 511, 514, 517, 520, 522, 524, 527, 530, 533, 536, 539, 542, 545, 548, 551, 554, 557, 560, 563, 566, 569, 572, 575, 578, 580, 582, 585, 588, 591, 594, 597, 600, 603, 606, 609, 612, 615, 618, 621, 624, 627, 630, 633, 636, 638, 640, 643, 646, 649, 652, 655, 658, 661, 664, 667, 670, 673, 676, 679, 682, 685, 688, 691, 694, 696, 698, 701, 704, 707, 710, 713, 716, 719, 722, 725, 728, 731, 734, 737, 740, 743, 746, 749, 752, 754, 756, 759, 762, 765, 768, 771, 774, 777, 780, 783, 786, 789, 792, 795, 798, 801, 804, 807, 810, 812, 814, 817, 820, 823, 826, 829, 832, 835, 838, 841, 844, 847, 850, 853, 856, 859, 862, 865, 868, 870, 872, 875, 878, 881, 884, 887, 890, 893, 896, 899, 902, 905, 908, 911, 914, 917, 920, 923, 926, 928, 930, 933, 936, 939, 942, 945, 948, 951, 954, 957, 960, 963, 966, 969, 972, 975, 978, 981, 984, 986, 988, 991, 994, 997, 1000, 1003, 1006, 1009, 1012, 1015, 1018, 1021, 1024, 1027, 1030, 1033, 1036, 1039, 1042, 1044, 1046, 1049, 1052, 1055, 1058, 1061, 1064, 1067, 1070, 1073, 1076, 1079, 1082, 1085, 1088, 1091, 1094, 1097, 1100, 1102, 1104, 1107, 1110, 1113, 1116, 1119, 1122, 1125, 1128, 1131, 1134, 1137, 1140, 1143, 1146, 1149, 1152, 1155, 1158, 1160]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618810146912, "name": "@", "id": -7375431717442032340, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618810145616, "name": "Sparse Matrix (400, 20)", "id": -5854368103411602408, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [400, 20], "data": [-0.0004256398830028453, -0.0004256398830028453, -0.0004256398830028453, -0.0004256398830028453, -0.0004256398830028453, -0.0004256398830028453, -0.0004256398830028453, -0.0004256398830028453, -0.0004256398830028453, -0.0004256398830028453, -0.0004256398830028453, -0.0004256398830028453, -0.0004256398830028453, -0.0004256398830028453, -0.0004256398830028453, -0.0004256398830028453, -0.0004256398830028453, -0.0004256398830028453, -0.0004256398830028453, -0.0004256398830028453], "row_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "column_pointers": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20]}, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812756432, "name": "*", "id": -2991990513920916566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812749856, "name": "*", "id": -4360211028544939589, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812980144, "name": "2.0", "id": -5152612468232829164, "value": 2.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812749712, "name": "*", "id": 7720798338140752300, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812748368, "name": "*", "id": 7537189032895441055, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812745440, "name": "*", "id": 3408340872438249903, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813356880, "name": "6e-07", "id": 355168022731336579, "value": 6e-07, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Power", "py/id": 130618812744240, "name": "**", "id": -8623461634867238515, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812748080, "name": "maximum", "id": -3962336837355174394, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812746496, "name": "*", "id": -2628472635338675085, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812746352, "name": "3333.3333333333335", "id": -6323253136627928067, "value": 3333.3333333333335, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812690944, "name": "y[842:862]", "id": -649962113286084747, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 842, "stop": 862, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812904896, "name": "1e-08", "id": 8264878393496015688, "value": 1e-08, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813599232, "name": "0.5", "id": 8689907665561100849, "value": 0.5, "children": []}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Power", "py/id": 130618812748128, "name": "**", "id": 237302561589010522, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812748752, "name": "maximum", "id": -8188174639366095977, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812749376, "name": "minimum", "id": 3993867167987437362, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812748896, "name": "@", "id": 6826236906824664973, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812749040, "name": "Sparse Matrix (20, 400)", "id": -7753167272989850642, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813358416, "name": "51217.92521874824", "id": -4609095240902580030, "value": 51217.92521874824, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813356304, "name": "0.000512179257309275", "id": 7133712376225145202, "value": 0.000512179257309275, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813599232, "name": "0.5", "id": 8689907665561100849, "value": 0.5, "children": []}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Power", "py/id": 130618812748800, "name": "**", "id": 1917811863503173755, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812749568, "name": "-", "id": -1246477591419729199, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813360432, "name": "Maximum concentration in positive electrode [mol.m-3]", "id": 8933524311479642027, "value": 51217.9257309275, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812748752, "name": "maximum", "id": -8188174639366095977, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812749376, "name": "minimum", "id": 3993867167987437362, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812748896, "name": "@", "id": 6826236906824664973, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812749040, "name": "Sparse Matrix (20, 400)", "id": -7753167272989850642, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813358416, "name": "51217.92521874824", "id": -4609095240902580030, "value": 51217.92521874824, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813356304, "name": "0.000512179257309275", "id": 7133712376225145202, "value": 0.000512179257309275, "children": []}]}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813599232, "name": "0.5", "id": 8689907665561100849, "value": 0.5, "children": []}]}]}]}, {"py/object": "pybamm.expression_tree.functions.Sinh", "py/id": 130618812748512, "name": "function (sinh)", "id": 9195165020260810540, "function": "sinh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812756240, "name": "*", "id": 1252999716597568335, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618886457344, "name": "19.460872247804556", "id": 6066586310732700454, "value": 19.460872247804556, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812756096, "name": "-", "id": 1438129123663594719, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812750528, "name": "-", "id": -4978577623806477239, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812750192, "name": "+", "id": 6180502162786781022, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813767920, "name": "3.8518235799803935", "id": 620304935402715880, "value": 3.8518235799803935, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812748608, "name": "y[882:902]", "id": 3054093096792367542, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 882, "stop": 902, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812750432, "name": "+", "id": 813362874902076708, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813603360, "name": "-0.175189434028335", "id": 7119419765525498274, "value": -0.175189434028335, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812750000, "name": "y[942:962]", "id": -870805730609750089, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 942, "stop": 962, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812755952, "name": "+", "id": 5123365761583074500, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812755088, "name": "-", "id": -8152118321675099416, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812754416, "name": "+", "id": 4998606054031930750, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812753792, "name": "+", "id": 5431271169514107080, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812753168, "name": "-", "id": 5818032960006493050, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812752496, "name": "+", "id": 6459499933431406763, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812751824, "name": "+", "id": 5849756346192955011, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813774208, "name": "2.16216", "id": 7088823027077335540, "value": 2.16216, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812751680, "name": "*", "id": -7390914559135385331, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813773920, "name": "0.07645", "id": 3467962075886846323, "value": 0.07645, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812750288, "name": "function (tanh)", "id": -4058806610612652244, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812751488, "name": "-", "id": -3479755179842202475, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813772960, "name": "30.834", "id": 6311483360681990758, "value": 30.834, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812751344, "name": "*", "id": -6849675900790099540, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813773200, "name": "57.858397200000006", "id": 8027320023713144814, "value": 57.858397200000006, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812750912, "name": "maximum", "id": 2122434397506504971, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812750048, "name": "minimum", "id": 6918834552341564157, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812750768, "name": "@", "id": -8558974238558345566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812750960, "name": "Sparse Matrix (20, 400)", "id": 7194773163440000726, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812752352, "name": "*", "id": 6289715363493954645, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130620427939200, "name": "2.1581", "id": 543019129418541479, "value": 2.1581, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812751248, "name": "function (tanh)", "id": 5704247280564288049, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812752160, "name": "-", "id": -7785982527032588290, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814709888, "name": "52.294", "id": 5665295360841558076, "value": 52.294, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812752016, "name": "*", "id": 7025941896119654872, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813774880, "name": "53.412228", "id": 2461957677817975307, "value": 53.412228, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812750912, "name": "maximum", "id": 2122434397506504971, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812750048, "name": "minimum", "id": 6918834552341564157, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812750768, "name": "@", "id": -8558974238558345566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812750960, "name": "Sparse Matrix (20, 400)", "id": 7194773163440000726, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812753024, "name": "*", "id": 1211148563028459181, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130620416434512, "name": "0.14169", "id": -3419048817258058669, "value": 0.14169, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812751920, "name": "function (tanh)", "id": -7754066623758951276, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812752832, "name": "-", "id": 4207632483616887984, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130620416436432, "name": "11.0923", "id": -5503757140826160107, "value": 11.0923, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812752688, "name": "*", "id": 2133528354538859689, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130620416433696, "name": "21.0852666", "id": -3344716853701631705, "value": 21.0852666, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812750912, "name": "maximum", "id": 2122434397506504971, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812750048, "name": "minimum", "id": 6918834552341564157, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812750768, "name": "@", "id": -8558974238558345566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812750960, "name": "Sparse Matrix (20, 400)", "id": 7194773163440000726, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812753648, "name": "*", "id": 4659861442619171071, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813351552, "name": "0.2051", "id": 7458922957963772, "value": 0.2051, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812752592, "name": "function (tanh)", "id": 2252511426160844267, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812753456, "name": "-", "id": 6802236584016486100, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813352464, "name": "1.4684", "id": 3418309655544577912, "value": 1.4684, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812753360, "name": "*", "id": 286367983352007038, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813353424, "name": "5.829105600000001", "id": 3261629117311082741, "value": 5.829105600000001, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812750912, "name": "maximum", "id": 2122434397506504971, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812750048, "name": "minimum", "id": 6918834552341564157, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812750768, "name": "@", "id": -8558974238558345566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812750960, "name": "Sparse Matrix (20, 400)", "id": 7194773163440000726, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812754272, "name": "*", "id": -4560397341261300114, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813357408, "name": "0.2531", "id": -5004762162693954208, "value": 0.2531, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812753264, "name": "function (tanh)", "id": -6502476172759175316, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812754128, "name": "-", "id": 342744639602009179, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813364128, "name": "4.291641337386018", "id": -5528541941614304321, "value": 4.291641337386018, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812753984, "name": "*", "id": -2121849807242607481, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813267696, "name": "8.069908814589667", "id": 1675063614458922122, "value": 8.069908814589667, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812750912, "name": "maximum", "id": 2122434397506504971, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812750048, "name": "minimum", "id": 6918834552341564157, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812750768, "name": "@", "id": -8558974238558345566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812750960, "name": "Sparse Matrix (20, 400)", "id": 7194773163440000726, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812754944, "name": "*", "id": -2927027548940809717, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813610704, "name": "0.02167", "id": -8590452496054267420, "value": 0.02167, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812753888, "name": "function (tanh)", "id": -7208229040751314603, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812754752, "name": "+", "id": -5840170938271985206, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813609648, "name": "-87.5", "id": -4786059711555051945, "value": -87.5, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812754608, "name": "*", "id": 6139688208598473797, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813607776, "name": "177.0", "id": 217763134228642563, "value": 177.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812750912, "name": "maximum", "id": 2122434397506504971, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812750048, "name": "minimum", "id": 6918834552341564157, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812750768, "name": "@", "id": -8558974238558345566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812750960, "name": "Sparse Matrix (20, 400)", "id": 7194773163440000726, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812755808, "name": "*", "id": 5501256929259757199, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814229696, "name": "1e-06", "id": -2580769557222913764, "value": 1e-06, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812755664, "name": "+", "id": 4992724793048039161, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Division", "py/id": 130618812754848, "name": "/", "id": 8756252382160020078, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814315792, "name": "1.0", "id": -2100809710563135213, "value": 1.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812750912, "name": "maximum", "id": 2122434397506504971, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812750048, "name": "minimum", "id": 6918834552341564157, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812750768, "name": "@", "id": -8558974238558345566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812750960, "name": "Sparse Matrix (20, 400)", "id": 7194773163440000726, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Division", "py/id": 130618812755232, "name": "/", "id": 7349184667665570886, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814315792, "name": "1.0", "id": -2100809710563135213, "value": 1.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812755376, "name": "+", "id": -2510922712789457241, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130619696064528, "name": "-1.0", "id": -5413240934256496585, "value": -1.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812750912, "name": "maximum", "id": 2122434397506504971, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812750048, "name": "minimum", "id": 6918834552341564157, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812750768, "name": "@", "id": -8558974238558345566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812750960, "name": "Sparse Matrix (20, 400)", "id": 7194773163440000726, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618810152816, "name": "-", "id": 1124003944089738924, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.concatenations.DomainConcatenation", "py/id": 130618810152192, "name": "domain_concatenation", "id": 135390860412599557, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "slices": {"negative electrode": [{"start": 0, "stop": 20, "step": null}], "separator": [{"start": 20, "stop": 40, "step": null}], "positive electrode": [{"start": 40, "stop": 60, "step": null}]}, "size": 60, "children_slices": [{"negative electrode": [{"start": 0, "stop": 20, "step": null}]}, {"separator": [{"start": 0, "stop": 20, "step": null}]}, {"positive electrode": [{"start": 0, "stop": 20, "step": null}]}], "secondary_dimensions_npts": 1, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618810152576, "name": "*", "id": 8605443913114196611, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618810152624, "name": "0.0018655685381911908", "id": -471332407162465822, "value": 0.0018655685381911908, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618813350160, "name": "*", "id": 5011301037419029294, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812691520, "name": "*", "id": 1616801225961756727, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812980144, "name": "2.0", "id": -5152612468232829164, "value": 2.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812691472, "name": "*", "id": 1550879348602589526, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812692048, "name": "*", "id": -8168648470131736160, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812694016, "name": "*", "id": 1489928314745703231, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813600240, "name": "2e-05", "id": 4013417785191156942, "value": 2e-05, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Power", "py/id": 130618812478624, "name": "**", "id": -2968840177917711684, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618813356496, "name": "maximum", "id": 1518251857377620986, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618813350112, "name": "*", "id": 1427763863586884248, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813350736, "name": "3333.3333333333335", "id": -6323253136627928067, "value": 3333.3333333333335, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618905580832, "name": "y[802:822]", "id": 7690233847097366697, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 802, "stop": 822, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812904896, "name": "1e-08", "id": 8264878393496015688, "value": 1e-08, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813599232, "name": "0.5", "id": 8689907665561100849, "value": 0.5, "children": []}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Power", "py/id": 130618812128176, "name": "**", "id": -4608803328745439545, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618816498048, "name": "maximum", "id": -1081378646585160925, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812321520, "name": "minimum", "id": -3863167891292241672, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812481456, "name": "@", "id": -7187558079876947875, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812692672, "name": "Sparse Matrix (20, 400)", "id": -6997513742234494012, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813597600, "name": "24983.261744011077", "id": 4240369327199516886, "value": 24983.261744011077, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813597936, "name": "0.000249832619938437", "id": 433485535404929403, "value": 0.000249832619938437, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813599232, "name": "0.5", "id": 8689907665561100849, "value": 0.5, "children": []}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Power", "py/id": 130618812682208, "name": "**", "id": -6925208073502469590, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812693344, "name": "-", "id": 7338248899687164424, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813360192, "name": "Maximum concentration in negative electrode [mol.m-3]", "id": 1403618475143340938, "value": 24983.2619938437, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618816498048, "name": "maximum", "id": -1081378646585160925, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812321520, "name": "minimum", "id": -3863167891292241672, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812481456, "name": "@", "id": -7187558079876947875, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812692672, "name": "Sparse Matrix (20, 400)", "id": -6997513742234494012, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813597600, "name": "24983.261744011077", "id": 4240369327199516886, "value": 24983.261744011077, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813597936, "name": "0.000249832619938437", "id": 433485535404929403, "value": 0.000249832619938437, "children": []}]}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813599232, "name": "0.5", "id": 8689907665561100849, "value": 0.5, "children": []}]}]}]}, {"py/object": "pybamm.expression_tree.functions.Sinh", "py/id": 130618893925744, "name": "function (sinh)", "id": -7417955762921766981, "function": "sinh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130619684477824, "name": "*", "id": -6377026607472615587, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618886457344, "name": "19.460872247804556", "id": 6066586310732700454, "value": 19.460872247804556, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812693680, "name": "-", "id": -3455383846556825401, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812690224, "name": "-", "id": 6531123047546519025, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812134416, "name": "y[862:882]", "id": 3768437392307318697, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 862, "stop": 882, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812690128, "name": "+", "id": -9057465236387790657, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813603360, "name": "-0.175189434028335", "id": 7119419765525498274, "value": -0.175189434028335, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812689744, "name": "y[902:922]", "id": 9166663523892018386, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 902, "stop": 922, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812693008, "name": "+", "id": 3170897706092531731, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812679328, "name": "+", "id": -2777145571203767738, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812747840, "name": "-", "id": -5660318420995079994, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812747216, "name": "-", "id": -8648600629949224676, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812746544, "name": "-", "id": -5891325346290398064, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812745872, "name": "-", "id": -3350222043601992656, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812745632, "name": "-", "id": 5457203170190986492, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812556704, "name": "-", "id": -4410910365300563589, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812684752, "name": "+", "id": -2628742156004538940, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812679808, "name": "+", "id": 2758625630139523814, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813605808, "name": "0.194", "id": 7740175521299642395, "value": 0.194, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812681584, "name": "*", "id": -3520860642976347259, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813606576, "name": "1.5", "id": 139763743454655332, "value": 1.5, "children": []}, {"py/object": "pybamm.expression_tree.functions.Exp", "py/id": 130618813768064, "name": "function (exp)", "id": -1991600572700148071, "function": "exp", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812681824, "name": "*", "id": -1142695973840209058, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813606096, "name": "-120.0", "id": -2666327541602118939, "value": -120.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812688832, "name": "*", "id": 1557036889693772453, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813606432, "name": "0.0351", "id": -6038329582079776216, "value": 0.0351, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812678896, "name": "function (tanh)", "id": 5845740464714440657, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812684800, "name": "+", "id": 5985495665387707307, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813602112, "name": "-3.44578313253012", "id": 8414662192146109933, "value": -3.44578313253012, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812679712, "name": "*", "id": -8867531115730044939, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813600096, "name": "12.048192771084336", "id": 2286773060606674287, "value": 12.048192771084336, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812556320, "name": "*", "id": 2987832948571782069, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813604944, "name": "0.0045", "id": -7336862686117729124, "value": 0.0045, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812680960, "name": "function (tanh)", "id": 1000424540452344079, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812688256, "name": "+", "id": 2500977860664972913, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813598128, "name": "-7.1344537815126055", "id": -2008027762916420739, "value": -7.1344537815126055, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812686192, "name": "*", "id": 6841719940451303636, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813599472, "name": "8.403361344537815", "id": 5137747773265705339, "value": 8.403361344537815, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812745488, "name": "*", "id": 2593665060573518236, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813600816, "name": "0.035", "id": 5340442218001158498, "value": 0.035, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812687536, "name": "function (tanh)", "id": 3525689365544371876, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812745296, "name": "+", "id": 7472497014997641358, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813363648, "name": "-18.466", "id": 2698408429651132352, "value": -18.466, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812744864, "name": "*", "id": 5236413183585979948, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813365904, "name": "20.0", "id": -2315749538005855916, "value": 20.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812745728, "name": "*", "id": -6222388883410834833, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813661360, "name": "0.0147", "id": 865196841519913110, "value": 0.0147, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812744144, "name": "function (tanh)", "id": -2237366335376051250, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812744288, "name": "+", "id": 737201374737237077, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813662512, "name": "-14.705882352941176", "id": 2973855845376108883, "value": -14.705882352941176, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812744816, "name": "*", "id": 1442672162688177164, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813662320, "name": "29.41176470588235", "id": -113256828160498776, "value": 29.41176470588235, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812746400, "name": "*", "id": -8458121232804279703, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813661552, "name": "0.102", "id": -1850981887219250428, "value": 0.102, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812745104, "name": "function (tanh)", "id": -3780828074974052996, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812746208, "name": "+", "id": 6961685620758259702, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813663760, "name": "-1.3661971830985917", "id": 7893090581833987542, "value": -1.3661971830985917, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812746064, "name": "*", "id": -1435395326191985150, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813663520, "name": "7.042253521126761", "id": -8437487278446070949, "value": 7.042253521126761, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812747072, "name": "*", "id": 5962223132358208642, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813664624, "name": "0.022", "id": -7588270992824822451, "value": 0.022, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812745968, "name": "function (tanh)", "id": -3444838196878594690, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812746880, "name": "+", "id": 7178807879491518423, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813664960, "name": "-54.8780487804878", "id": 336533465918387103, "value": -54.8780487804878, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812746736, "name": "*", "id": -3772427557061202442, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813664720, "name": "60.975609756097555", "id": -3846185782827536214, "value": 60.975609756097555, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812747696, "name": "*", "id": 8302701633561226124, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813665392, "name": "0.011", "id": 7061990918433917315, "value": 0.011, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812746640, "name": "function (tanh)", "id": -4667093808057287353, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812747552, "name": "+", "id": -333759140474274285, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813666304, "name": "-5.486725663716814", "id": 596050542444722654, "value": -5.486725663716814, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812747408, "name": "*", "id": 7931455061119874708, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813666064, "name": "44.24778761061947", "id": -8600761206958233429, "value": 44.24778761061947, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812681728, "name": "*", "id": 2663053549108018989, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813665776, "name": "0.0155", "id": 2465743936332173434, "value": 0.0155, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812132832, "name": "function (tanh)", "id": 2887192342577501511, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618880710208, "name": "+", "id": -7435334446882785747, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813667552, "name": "-3.6206896551724133", "id": 840276053350863505, "value": -3.6206896551724133, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812748032, "name": "*", "id": -3544537289702228274, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813667312, "name": "34.48275862068965", "id": -5637925993549098701, "value": 34.48275862068965, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812691328, "name": "*", "id": -7538571070900019829, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814229696, "name": "1e-06", "id": -2580769557222913764, "value": 1e-06, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812691760, "name": "+", "id": 7736217800210834407, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Division", "py/id": 130618812688544, "name": "/", "id": 8420292910285788713, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814315792, "name": "1.0", "id": -2100809710563135213, "value": 1.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Division", "py/id": 130618812689936, "name": "/", "id": -2317948313576916529, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814315792, "name": "1.0", "id": -2100809710563135213, "value": 1.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812690176, "name": "+", "id": -8577457382471511308, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130619696064528, "name": "-1.0", "id": -5413240934256496585, "value": -1.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618810152720, "name": "Column vector of length 20", "id": -3522241266837698914, "domains": {"primary": ["separator"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "entries": [[0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0]], "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618810153008, "name": "*", "id": -1363832762727425598, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618810153056, "name": "0.0015546404484926594", "id": -5171345081335359530, "value": 0.0015546404484926594, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812756432, "name": "*", "id": -2991990513920916566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812749856, "name": "*", "id": -4360211028544939589, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812980144, "name": "2.0", "id": -5152612468232829164, "value": 2.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812749712, "name": "*", "id": 7720798338140752300, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812748368, "name": "*", "id": 7537189032895441055, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812745440, "name": "*", "id": 3408340872438249903, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813356880, "name": "6e-07", "id": 355168022731336579, "value": 6e-07, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Power", "py/id": 130618812744240, "name": "**", "id": -8623461634867238515, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812748080, "name": "maximum", "id": -3962336837355174394, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812746496, "name": "*", "id": -2628472635338675085, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812746352, "name": "3333.3333333333335", "id": -6323253136627928067, "value": 3333.3333333333335, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812690944, "name": "y[842:862]", "id": -649962113286084747, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 842, "stop": 862, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812904896, "name": "1e-08", "id": 8264878393496015688, "value": 1e-08, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813599232, "name": "0.5", "id": 8689907665561100849, "value": 0.5, "children": []}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Power", "py/id": 130618812748128, "name": "**", "id": 237302561589010522, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812748752, "name": "maximum", "id": -8188174639366095977, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812749376, "name": "minimum", "id": 3993867167987437362, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812748896, "name": "@", "id": 6826236906824664973, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812749040, "name": "Sparse Matrix (20, 400)", "id": -7753167272989850642, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813358416, "name": "51217.92521874824", "id": -4609095240902580030, "value": 51217.92521874824, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813356304, "name": "0.000512179257309275", "id": 7133712376225145202, "value": 0.000512179257309275, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813599232, "name": "0.5", "id": 8689907665561100849, "value": 0.5, "children": []}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Power", "py/id": 130618812748800, "name": "**", "id": 1917811863503173755, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812749568, "name": "-", "id": -1246477591419729199, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813360432, "name": "Maximum concentration in positive electrode [mol.m-3]", "id": 8933524311479642027, "value": 51217.9257309275, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812748752, "name": "maximum", "id": -8188174639366095977, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812749376, "name": "minimum", "id": 3993867167987437362, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812748896, "name": "@", "id": 6826236906824664973, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812749040, "name": "Sparse Matrix (20, 400)", "id": -7753167272989850642, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813358416, "name": "51217.92521874824", "id": -4609095240902580030, "value": 51217.92521874824, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813356304, "name": "0.000512179257309275", "id": 7133712376225145202, "value": 0.000512179257309275, "children": []}]}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813599232, "name": "0.5", "id": 8689907665561100849, "value": 0.5, "children": []}]}]}]}, {"py/object": "pybamm.expression_tree.functions.Sinh", "py/id": 130618812748512, "name": "function (sinh)", "id": 9195165020260810540, "function": "sinh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812756240, "name": "*", "id": 1252999716597568335, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618886457344, "name": "19.460872247804556", "id": 6066586310732700454, "value": 19.460872247804556, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812756096, "name": "-", "id": 1438129123663594719, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812750528, "name": "-", "id": -4978577623806477239, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812750192, "name": "+", "id": 6180502162786781022, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813767920, "name": "3.8518235799803935", "id": 620304935402715880, "value": 3.8518235799803935, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812748608, "name": "y[882:902]", "id": 3054093096792367542, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 882, "stop": 902, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812750432, "name": "+", "id": 813362874902076708, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813603360, "name": "-0.175189434028335", "id": 7119419765525498274, "value": -0.175189434028335, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812750000, "name": "y[942:962]", "id": -870805730609750089, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 942, "stop": 962, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812755952, "name": "+", "id": 5123365761583074500, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812755088, "name": "-", "id": -8152118321675099416, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812754416, "name": "+", "id": 4998606054031930750, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812753792, "name": "+", "id": 5431271169514107080, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812753168, "name": "-", "id": 5818032960006493050, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812752496, "name": "+", "id": 6459499933431406763, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812751824, "name": "+", "id": 5849756346192955011, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813774208, "name": "2.16216", "id": 7088823027077335540, "value": 2.16216, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812751680, "name": "*", "id": -7390914559135385331, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813773920, "name": "0.07645", "id": 3467962075886846323, "value": 0.07645, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812750288, "name": "function (tanh)", "id": -4058806610612652244, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812751488, "name": "-", "id": -3479755179842202475, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813772960, "name": "30.834", "id": 6311483360681990758, "value": 30.834, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812751344, "name": "*", "id": -6849675900790099540, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813773200, "name": "57.858397200000006", "id": 8027320023713144814, "value": 57.858397200000006, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812750912, "name": "maximum", "id": 2122434397506504971, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812750048, "name": "minimum", "id": 6918834552341564157, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812750768, "name": "@", "id": -8558974238558345566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812750960, "name": "Sparse Matrix (20, 400)", "id": 7194773163440000726, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812752352, "name": "*", "id": 6289715363493954645, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130620427939200, "name": "2.1581", "id": 543019129418541479, "value": 2.1581, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812751248, "name": "function (tanh)", "id": 5704247280564288049, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812752160, "name": "-", "id": -7785982527032588290, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814709888, "name": "52.294", "id": 5665295360841558076, "value": 52.294, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812752016, "name": "*", "id": 7025941896119654872, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813774880, "name": "53.412228", "id": 2461957677817975307, "value": 53.412228, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812750912, "name": "maximum", "id": 2122434397506504971, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812750048, "name": "minimum", "id": 6918834552341564157, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812750768, "name": "@", "id": -8558974238558345566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812750960, "name": "Sparse Matrix (20, 400)", "id": 7194773163440000726, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812753024, "name": "*", "id": 1211148563028459181, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130620416434512, "name": "0.14169", "id": -3419048817258058669, "value": 0.14169, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812751920, "name": "function (tanh)", "id": -7754066623758951276, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812752832, "name": "-", "id": 4207632483616887984, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130620416436432, "name": "11.0923", "id": -5503757140826160107, "value": 11.0923, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812752688, "name": "*", "id": 2133528354538859689, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130620416433696, "name": "21.0852666", "id": -3344716853701631705, "value": 21.0852666, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812750912, "name": "maximum", "id": 2122434397506504971, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812750048, "name": "minimum", "id": 6918834552341564157, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812750768, "name": "@", "id": -8558974238558345566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812750960, "name": "Sparse Matrix (20, 400)", "id": 7194773163440000726, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812753648, "name": "*", "id": 4659861442619171071, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813351552, "name": "0.2051", "id": 7458922957963772, "value": 0.2051, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812752592, "name": "function (tanh)", "id": 2252511426160844267, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812753456, "name": "-", "id": 6802236584016486100, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813352464, "name": "1.4684", "id": 3418309655544577912, "value": 1.4684, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812753360, "name": "*", "id": 286367983352007038, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813353424, "name": "5.829105600000001", "id": 3261629117311082741, "value": 5.829105600000001, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812750912, "name": "maximum", "id": 2122434397506504971, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812750048, "name": "minimum", "id": 6918834552341564157, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812750768, "name": "@", "id": -8558974238558345566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812750960, "name": "Sparse Matrix (20, 400)", "id": 7194773163440000726, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812754272, "name": "*", "id": -4560397341261300114, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813357408, "name": "0.2531", "id": -5004762162693954208, "value": 0.2531, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812753264, "name": "function (tanh)", "id": -6502476172759175316, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812754128, "name": "-", "id": 342744639602009179, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813364128, "name": "4.291641337386018", "id": -5528541941614304321, "value": 4.291641337386018, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812753984, "name": "*", "id": -2121849807242607481, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813267696, "name": "8.069908814589667", "id": 1675063614458922122, "value": 8.069908814589667, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812750912, "name": "maximum", "id": 2122434397506504971, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812750048, "name": "minimum", "id": 6918834552341564157, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812750768, "name": "@", "id": -8558974238558345566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812750960, "name": "Sparse Matrix (20, 400)", "id": 7194773163440000726, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812754944, "name": "*", "id": -2927027548940809717, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813610704, "name": "0.02167", "id": -8590452496054267420, "value": 0.02167, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812753888, "name": "function (tanh)", "id": -7208229040751314603, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812754752, "name": "+", "id": -5840170938271985206, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813609648, "name": "-87.5", "id": -4786059711555051945, "value": -87.5, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812754608, "name": "*", "id": 6139688208598473797, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813607776, "name": "177.0", "id": 217763134228642563, "value": 177.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812750912, "name": "maximum", "id": 2122434397506504971, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812750048, "name": "minimum", "id": 6918834552341564157, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812750768, "name": "@", "id": -8558974238558345566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812750960, "name": "Sparse Matrix (20, 400)", "id": 7194773163440000726, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812755808, "name": "*", "id": 5501256929259757199, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814229696, "name": "1e-06", "id": -2580769557222913764, "value": 1e-06, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812755664, "name": "+", "id": 4992724793048039161, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Division", "py/id": 130618812754848, "name": "/", "id": 8756252382160020078, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814315792, "name": "1.0", "id": -2100809710563135213, "value": 1.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812750912, "name": "maximum", "id": 2122434397506504971, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812750048, "name": "minimum", "id": 6918834552341564157, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812750768, "name": "@", "id": -8558974238558345566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812750960, "name": "Sparse Matrix (20, 400)", "id": 7194773163440000726, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Division", "py/id": 130618812755232, "name": "/", "id": 7349184667665570886, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814315792, "name": "1.0", "id": -2100809710563135213, "value": 1.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812755376, "name": "+", "id": -2510922712789457241, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130619696064528, "name": "-1.0", "id": -5413240934256496585, "value": -1.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812750912, "name": "maximum", "id": 2122434397506504971, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812750048, "name": "minimum", "id": 6918834552341564157, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812750768, "name": "@", "id": -8558974238558345566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812750960, "name": "Sparse Matrix (20, 400)", "id": 7194773163440000726, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618810152288, "name": "@", "id": 5111975286745609767, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618810153200, "name": "Sparse Matrix (60, 61)", "id": -845503090791018386, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [60, 61], "data": [-199.99999999999997, 199.99999999999997, -199.99999999999997, 199.99999999999997, -199.99999999999994, 199.99999999999994, -200.00000000000003, 200.00000000000003, -200.00000000000003, 200.00000000000003, -199.9999999999999, 199.9999999999999, -200.00000000000003, 200.00000000000003, -200.00000000000003, 200.00000000000003, -200.00000000000003, 200.00000000000003, -200.00000000000003, 200.00000000000003, -200.00000000000003, 200.00000000000003, -199.99999999999974, 199.99999999999974, -200.00000000000003, 200.00000000000003, -200.00000000000003, 200.00000000000003, -200.00000000000003, 200.00000000000003, -200.00000000000003, 200.00000000000003, -200.00000000000003, 200.00000000000003, -200.00000000000003, 200.00000000000003, -200.00000000000003, 200.00000000000003, -200.00000000000003, 200.00000000000003, -799.999999999998, 799.999999999998, -800.0000000000065, 800.0000000000065, -799.999999999998, 799.999999999998, -799.999999999998, 799.999999999998, -799.999999999998, 799.999999999998, -799.999999999998, 799.999999999998, -800.0000000000065, 800.0000000000065, -799.999999999998, 799.999999999998, -799.999999999998, 799.999999999998, -800.0000000000065, 800.0000000000065, -799.999999999998, 799.999999999998, -799.999999999998, 799.999999999998, -799.999999999998, 799.999999999998, -799.999999999998, 799.999999999998, -800.0000000000065, 800.0000000000065, -799.999999999998, 799.999999999998, -799.999999999998, 799.999999999998, -800.0000000000065, 800.0000000000065, -799.999999999998, 799.999999999998, -799.999999999998, 799.999999999998, -199.9999999999995, 199.9999999999995, -200.00000000000057, 200.00000000000057, -200.00000000000057, 200.00000000000057, -199.9999999999995, 199.9999999999995, -199.9999999999995, 199.9999999999995, -200.00000000000057, 200.00000000000057, -200.00000000000057, 200.00000000000057, -199.9999999999995, 199.9999999999995, -199.9999999999995, 199.9999999999995, -200.00000000000057, 200.00000000000057, -200.00000000000057, 200.00000000000057, -199.9999999999995, 199.9999999999995, -199.9999999999995, 199.9999999999995, -200.00000000000057, 200.00000000000057, -200.00000000000057, 200.00000000000057, -199.9999999999995, 199.9999999999995, -199.9999999999995, 199.9999999999995, -200.00000000000057, 200.00000000000057, -200.00000000000057, 200.00000000000057, -199.9999999999995, 199.9999999999995], "row_indices": [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 53, 53, 54, 54, 55, 55, 56, 56, 57, 57, 58, 58, 59, 59, 60], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120]}, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618810142496, "name": "+", "id": -4353620890885954558, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618810142112, "name": "*", "id": 4429786712027739376, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618810144656, "name": "+", "id": 3017227079774925462, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618810144128, "name": "@", "id": -3440333256308190456, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618810144464, "name": "Sparse Matrix (61, 60)", "id": 6759687596726471679, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [61, 60], "data": [1.5, -0.5, -0.5, 1.5], "row_indices": [0, 1, 58, 59], "column_pointers": [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4]}, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618809677920, "name": "*", "id": 6761937058567578663, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618809763648, "name": "Column vector of length 60", "id": 7940968730092907666, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "entries": [[-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11]], "children": []}, {"py/object": "pybamm.expression_tree.functions.Exp", "py/id": 130618811660096, "name": "function (exp)", "id": 3182449226980879892, "function": "exp", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618810141536, "name": "*", "id": -3655588757332178686, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618811805440, "name": "-0.0006500000000000001", "id": -7784352322846209482, "value": -0.0006500000000000001, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618811381808, "name": "maximum", "id": 199891664379383001, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618811377824, "name": "*", "id": -7087282165572552477, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618811377872, "name": "Column vector of length 60", "id": 3233310656130415734, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "entries": [[3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335]], "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618815200432, "name": "y[802:862]", "id": -1497975616651879837, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 802, "stop": 862, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813105024, "name": "10.0", "id": -2130856396031236225, "value": 10.0, "children": []}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618810144704, "name": "@", "id": -5427913795999832598, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618810144080, "name": "Sparse Matrix (61, 59)", "id": -365787623448435183, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [61, 59], "data": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "row_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "column_pointers": [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 59]}, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Division", "py/id": 130618810143888, "name": "/", "id": -6324360753692100098, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618810143648, "name": "1.0", "id": -2100809710563135213, "value": 1.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618810143696, "name": "+", "id": -895609181409833294, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Division", "py/id": 130618810143360, "name": "/", "id": -6899159075517334375, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.array.Array", "py/id": 130618810143120, "name": "Array of shape (59, 1)", "id": 8568112573815089312, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": [[0.5], [0.4999999999999999], [0.5000000000000001], [0.5], [0.49999999999999983], [0.5000000000000002], [0.5], [0.5], [0.5], [0.5], [0.49999999999999967], [0.5000000000000003], [0.5], [0.5], [0.5], [0.5], [0.5], [0.5], [0.5], [0.7999999999999996], [0.5000000000000027], [0.4999999999999973], [0.5], [0.5], [0.5], [0.5000000000000027], [0.4999999999999973], [0.5], [0.5000000000000027], [0.4999999999999973], [0.5], [0.5], [0.5], [0.5000000000000027], [0.4999999999999973], [0.5], [0.5000000000000027], [0.4999999999999973], [0.5], [0.2], [0.5000000000000013], [0.5], [0.49999999999999867], [0.5], [0.5000000000000013], [0.5], [0.49999999999999867], [0.5], [0.5000000000000013], [0.5], [0.49999999999999867], [0.5], [0.5000000000000013], [0.5], [0.49999999999999867], [0.5], [0.5000000000000013], [0.5], [0.49999999999999867]], "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618810142544, "name": "@", "id": 9110630898721551533, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618811518656, "name": "Sparse Matrix (59, 60)", "id": 2006731159766664994, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [59, 60], "data": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "row_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "column_pointers": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59]}, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618809677920, "name": "*", "id": 6761937058567578663, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618809763648, "name": "Column vector of length 60", "id": 7940968730092907666, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "entries": [[-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11]], "children": []}, {"py/object": "pybamm.expression_tree.functions.Exp", "py/id": 130618811660096, "name": "function (exp)", "id": 3182449226980879892, "function": "exp", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618810141536, "name": "*", "id": -3655588757332178686, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618811805440, "name": "-0.0006500000000000001", "id": -7784352322846209482, "value": -0.0006500000000000001, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618811381808, "name": "maximum", "id": 199891664379383001, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618811377824, "name": "*", "id": -7087282165572552477, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618811377872, "name": "Column vector of length 60", "id": 3233310656130415734, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "entries": [[3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335]], "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618815200432, "name": "y[802:862]", "id": -1497975616651879837, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 802, "stop": 862, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813105024, "name": "10.0", "id": -2130856396031236225, "value": 10.0, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Division", "py/id": 130618810143264, "name": "/", "id": 6923213490805523106, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618810143744, "name": "Column vector of length 59", "id": 5504116970975098652, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": [[0.5], [0.5000000000000001], [0.4999999999999999], [0.5], [0.5000000000000002], [0.4999999999999998], [0.5], [0.5], [0.5], [0.5], [0.5000000000000003], [0.49999999999999967], [0.5], [0.5], [0.5], [0.5], [0.5], [0.5], [0.5], [0.2000000000000004], [0.49999999999999734], [0.5000000000000027], [0.5], [0.5], [0.5], [0.49999999999999734], [0.5000000000000027], [0.5], [0.49999999999999734], [0.5000000000000027], [0.5], [0.5], [0.5], [0.49999999999999734], [0.5000000000000027], [0.5], [0.49999999999999734], [0.5000000000000027], [0.5], [0.8], [0.49999999999999867], [0.5], [0.5000000000000013], [0.5], [0.49999999999999867], [0.5], [0.5000000000000013], [0.5], [0.49999999999999867], [0.5], [0.5000000000000013], [0.5], [0.49999999999999867], [0.5], [0.5000000000000013], [0.5], [0.49999999999999867], [0.5], [0.5000000000000013]], "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618810142928, "name": "@", "id": -7301861796451480046, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618810142784, "name": "Sparse Matrix (59, 60)", "id": 2082807614786886189, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [59, 60], "data": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "row_indices": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "column_pointers": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59]}, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618809677920, "name": "*", "id": 6761937058567578663, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618809763648, "name": "Column vector of length 60", "id": 7940968730092907666, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "entries": [[-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-5.34e-10], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11], [-8.77451537123276e-11]], "children": []}, {"py/object": "pybamm.expression_tree.functions.Exp", "py/id": 130618811660096, "name": "function (exp)", "id": 3182449226980879892, "function": "exp", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618810141536, "name": "*", "id": -3655588757332178686, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618811805440, "name": "-0.0006500000000000001", "id": -7784352322846209482, "value": -0.0006500000000000001, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618811381808, "name": "maximum", "id": 199891664379383001, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618811377824, "name": "*", "id": -7087282165572552477, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618811377872, "name": "Column vector of length 60", "id": 3233310656130415734, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "entries": [[3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335]], "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618815200432, "name": "y[802:862]", "id": -1497975616651879837, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 802, "stop": 862, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813105024, "name": "10.0", "id": -2130856396031236225, "value": 10.0, "children": []}]}]}]}]}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618811518176, "name": "@", "id": 9049577433437554950, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618811517888, "name": "Sparse Matrix (61, 60)", "id": 2817503278790292380, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [61, 60], "data": [199999.99999999994, -199999.99999999994, 199999.99999999994, -199999.99999999994, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 199999.99999999988, -199999.99999999988, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 199999.99999999948, -199999.99999999948, 200000.00000000055, -200000.00000000055, 199999.99999999948, -199999.99999999948, 200000.00000000055, -200000.00000000055, 199999.99999999948, -199999.99999999948, 200000.00000000055, -200000.00000000055, 199999.99999999948, -199999.99999999948, 320000.0000000005, -320000.0000000005, 800000.0000000065, -800000.0000000065, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 800000.0000000065, -800000.0000000065, 799999.9999999979, -799999.9999999979, 800000.0000000065, -800000.0000000065, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 800000.0000000065, -800000.0000000065, 799999.9999999979, -799999.9999999979, 800000.0000000065, -800000.0000000065, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 319999.9999999992, -319999.9999999992, 199999.99999999948, -199999.99999999948, 200000.00000000163, -200000.00000000163, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 200000.00000000163, -200000.00000000163, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 200000.00000000163, -200000.00000000163, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 200000.00000000163, -200000.00000000163, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 200000.00000000163, -200000.00000000163, 199999.99999999948, -199999.99999999948], "row_indices": [1, 0, 2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9, 11, 10, 12, 11, 13, 12, 14, 13, 15, 14, 16, 15, 17, 16, 18, 17, 19, 18, 20, 19, 21, 20, 22, 21, 23, 22, 24, 23, 25, 24, 26, 25, 27, 26, 28, 27, 29, 28, 30, 29, 31, 30, 32, 31, 33, 32, 34, 33, 35, 34, 36, 35, 37, 36, 38, 37, 39, 38, 40, 39, 41, 40, 42, 41, 43, 42, 44, 43, 45, 44, 46, 45, 47, 46, 48, 47, 49, 48, 50, 49, 51, 50, 52, 51, 53, 52, 54, 53, 55, 54, 56, 55, 57, 56, 58, 57, 59, 58], "column_pointers": [0, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 118]}, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618811377824, "name": "*", "id": -7087282165572552477, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618811377872, "name": "Column vector of length 60", "id": 3233310656130415734, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "entries": [[3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335]], "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618815200432, "name": "y[802:862]", "id": -1497975616651879837, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 802, "stop": 862, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618810142880, "name": "*", "id": -6008810716967779694, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618811932192, "name": "4.1457078626470916e-06", "id": 1486932030595887004, "value": 4.1457078626470916e-06, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618811377056, "name": "*", "id": -5089305978489753413, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618811377440, "name": "@", "id": -7103631496081522351, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618811377776, "name": "Sparse Matrix (61, 60)", "id": -8944274321525373426, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [61, 60], "data": [1.5, -0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, -0.5, 1.5], "row_indices": [0, 1, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 53, 53, 54, 54, 55, 55, 56, 56, 57, 57, 58, 58, 59, 58, 59], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122]}, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618811516496, "name": "+", "id": -2596386414150797407, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618811515104, "name": "-", "id": -4298272443359732609, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618811382624, "name": "+", "id": 4362082203920958720, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618811379840, "name": "Column vector of length 60", "id": 7474458076266660885, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "entries": [[0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.0911], [0.0911], [0.0911], [0.0911], [0.0911], [0.0911], [0.0911], [0.0911], [0.0911], [0.0911], [0.0911], [0.0911], [0.0911], [0.0911], [0.0911], [0.0911], [0.0911], [0.0911], [0.0911], [0.0911], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187]], "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618811381712, "name": "*", "id": -8986568805529309312, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618811381136, "name": "Column vector of length 60", "id": 6658175142160178423, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "entries": [[0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525]], "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618811381808, "name": "maximum", "id": 199891664379383001, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618811377824, "name": "*", "id": -7087282165572552477, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618811377872, "name": "Column vector of length 60", "id": 3233310656130415734, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "entries": [[3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335]], "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618815200432, "name": "y[802:862]", "id": -1497975616651879837, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 802, "stop": 862, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813105024, "name": "10.0", "id": -2130856396031236225, "value": 10.0, "children": []}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618811514960, "name": "*", "id": 2683586088285518310, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618811379024, "name": "Column vector of length 60", "id": 7121976820624321495, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "entries": [[1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07]], "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Power", "py/id": 130618811382960, "name": "**", "id": 8632101989791892141, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618811381808, "name": "maximum", "id": 199891664379383001, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618811377824, "name": "*", "id": -7087282165572552477, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618811377872, "name": "Column vector of length 60", "id": 3233310656130415734, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "entries": [[3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335]], "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618815200432, "name": "y[802:862]", "id": -1497975616651879837, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 802, "stop": 862, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813105024, "name": "10.0", "id": -2130856396031236225, "value": 10.0, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812980144, "name": "2.0", "id": -5152612468232829164, "value": 2.0, "children": []}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618811516352, "name": "*", "id": -1392339005773521319, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618811383056, "name": "Column vector of length 60", "id": 7463879151780490101, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "entries": [[2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11]], "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Power", "py/id": 130618811515440, "name": "**", "id": 7179531833336685979, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618811381808, "name": "maximum", "id": 199891664379383001, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618811377824, "name": "*", "id": -7087282165572552477, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618811377872, "name": "Column vector of length 60", "id": 3233310656130415734, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "entries": [[3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335]], "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618815200432, "name": "y[802:862]", "id": -1497975616651879837, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 802, "stop": 862, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813105024, "name": "10.0", "id": -2130856396031236225, "value": 10.0, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814416608, "name": "3.0", "id": 653269463420665749, "value": 3.0, "children": []}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618811380128, "name": "-", "id": 5576173810077200252, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618811383008, "name": "*", "id": -6114186157527307168, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618811380368, "name": "+", "id": 6306925410857167843, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618811382912, "name": "@", "id": 3305305752991763257, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618811381760, "name": "Sparse Matrix (61, 60)", "id": 6759687596726471679, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [61, 60], "data": [1.5, -0.5, -0.5, 1.5], "row_indices": [0, 1, 58, 59], "column_pointers": [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4]}, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Division", "py/id": 130618811516736, "name": "/", "id": -883719485587817014, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618811929984, "name": "0.03083109494579247", "id": 8953813036898841515, "value": 0.03083109494579247, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618811515536, "name": "maximum", "id": 3389031811675203979, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618811377824, "name": "*", "id": -7087282165572552477, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618811377872, "name": "Column vector of length 60", "id": 3233310656130415734, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "entries": [[3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335]], "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618815200432, "name": "y[802:862]", "id": -1497975616651879837, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 802, "stop": 862, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814714592, "name": "0.01", "id": 6256201899258323752, "value": 0.01, "children": []}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618811380704, "name": "@", "id": 90298605494455894, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618811383104, "name": "Sparse Matrix (61, 59)", "id": -365787623448435183, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [61, 59], "data": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "row_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "column_pointers": [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 59]}, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Division", "py/id": 130618811519376, "name": "/", "id": 2016845760196750717, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618811519088, "name": "1.0", "id": -2100809710563135213, "value": 1.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618811519136, "name": "+", "id": 176183255117486591, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Division", "py/id": 130618811518896, "name": "/", "id": -1406177667139331642, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.array.Array", "py/id": 130618815191552, "name": "Array of shape (59, 1)", "id": 8568112573815089312, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": [[0.5], [0.4999999999999999], [0.5000000000000001], [0.5], [0.49999999999999983], [0.5000000000000002], [0.5], [0.5], [0.5], [0.5], [0.49999999999999967], [0.5000000000000003], [0.5], [0.5], [0.5], [0.5], [0.5], [0.5], [0.5], [0.7999999999999996], [0.5000000000000027], [0.4999999999999973], [0.5], [0.5], [0.5], [0.5000000000000027], [0.4999999999999973], [0.5], [0.5000000000000027], [0.4999999999999973], [0.5], [0.5], [0.5], [0.5000000000000027], [0.4999999999999973], [0.5], [0.5000000000000027], [0.4999999999999973], [0.5], [0.2], [0.5000000000000013], [0.5], [0.49999999999999867], [0.5], [0.5000000000000013], [0.5], [0.49999999999999867], [0.5], [0.5000000000000013], [0.5], [0.49999999999999867], [0.5], [0.5000000000000013], [0.5], [0.49999999999999867], [0.5], [0.5000000000000013], [0.5], [0.49999999999999867]], "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618811517504, "name": "@", "id": -8798505101064682830, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618811517360, "name": "Sparse Matrix (59, 60)", "id": 2006731159766664994, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [59, 60], "data": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "row_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "column_pointers": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59]}, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Division", "py/id": 130618811516736, "name": "/", "id": -883719485587817014, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618811929984, "name": "0.03083109494579247", "id": 8953813036898841515, "value": 0.03083109494579247, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618811515536, "name": "maximum", "id": 3389031811675203979, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618811377824, "name": "*", "id": -7087282165572552477, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618811377872, "name": "Column vector of length 60", "id": 3233310656130415734, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "entries": [[3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335]], "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618815200432, "name": "y[802:862]", "id": -1497975616651879837, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 802, "stop": 862, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814714592, "name": "0.01", "id": 6256201899258323752, "value": 0.01, "children": []}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Division", "py/id": 130618811518320, "name": "/", "id": 4118198602642349166, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618811519184, "name": "Column vector of length 59", "id": 5504116970975098652, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": [[0.5], [0.5000000000000001], [0.4999999999999999], [0.5], [0.5000000000000002], [0.4999999999999998], [0.5], [0.5], [0.5], [0.5], [0.5000000000000003], [0.49999999999999967], [0.5], [0.5], [0.5], [0.5], [0.5], [0.5], [0.5], [0.2000000000000004], [0.49999999999999734], [0.5000000000000027], [0.5], [0.5], [0.5], [0.49999999999999734], [0.5000000000000027], [0.5], [0.49999999999999734], [0.5000000000000027], [0.5], [0.5], [0.5], [0.49999999999999734], [0.5000000000000027], [0.5], [0.49999999999999734], [0.5000000000000027], [0.5], [0.8], [0.49999999999999867], [0.5], [0.5000000000000013], [0.5], [0.49999999999999867], [0.5], [0.5000000000000013], [0.5], [0.49999999999999867], [0.5], [0.5000000000000013], [0.5], [0.49999999999999867], [0.5], [0.5000000000000013], [0.5], [0.49999999999999867], [0.5], [0.5000000000000013]], "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618811518560, "name": "@", "id": -7602252075786383158, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618811518512, "name": "Sparse Matrix (59, 60)", "id": 2082807614786886189, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [59, 60], "data": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "row_indices": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "column_pointers": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59]}, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Division", "py/id": 130618811516736, "name": "/", "id": -883719485587817014, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618811929984, "name": "0.03083109494579247", "id": 8953813036898841515, "value": 0.03083109494579247, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618811515536, "name": "maximum", "id": 3389031811675203979, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618811377824, "name": "*", "id": -7087282165572552477, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618811377872, "name": "Column vector of length 60", "id": 3233310656130415734, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "entries": [[3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335]], "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618815200432, "name": "y[802:862]", "id": -1497975616651879837, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 802, "stop": 862, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814714592, "name": "0.01", "id": 6256201899258323752, "value": 0.01, "children": []}]}]}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618811518176, "name": "@", "id": 9049577433437554950, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618811517888, "name": "Sparse Matrix (61, 60)", "id": 2817503278790292380, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [61, 60], "data": [199999.99999999994, -199999.99999999994, 199999.99999999994, -199999.99999999994, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 199999.99999999988, -199999.99999999988, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 199999.99999999948, -199999.99999999948, 200000.00000000055, -200000.00000000055, 199999.99999999948, -199999.99999999948, 200000.00000000055, -200000.00000000055, 199999.99999999948, -199999.99999999948, 200000.00000000055, -200000.00000000055, 199999.99999999948, -199999.99999999948, 320000.0000000005, -320000.0000000005, 800000.0000000065, -800000.0000000065, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 800000.0000000065, -800000.0000000065, 799999.9999999979, -799999.9999999979, 800000.0000000065, -800000.0000000065, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 800000.0000000065, -800000.0000000065, 799999.9999999979, -799999.9999999979, 800000.0000000065, -800000.0000000065, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 319999.9999999992, -319999.9999999992, 199999.99999999948, -199999.99999999948, 200000.00000000163, -200000.00000000163, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 200000.00000000163, -200000.00000000163, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 200000.00000000163, -200000.00000000163, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 200000.00000000163, -200000.00000000163, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 200000.00000000163, -200000.00000000163, 199999.99999999948, -199999.99999999948], "row_indices": [1, 0, 2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9, 11, 10, 12, 11, 13, 12, 14, 13, 15, 14, 16, 15, 17, 16, 18, 17, 19, 18, 20, 19, 21, 20, 22, 21, 23, 22, 24, 23, 25, 24, 26, 25, 27, 26, 28, 27, 29, 28, 30, 29, 31, 30, 32, 31, 33, 32, 34, 33, 35, 34, 36, 35, 37, 36, 38, 37, 39, 38, 40, 39, 41, 40, 42, 41, 43, 42, 44, 43, 45, 44, 46, 45, 47, 46, 48, 47, 49, 48, 50, 49, 51, 50, 52, 51, 53, 52, 54, 53, 55, 54, 56, 55, 57, 56, 58, 57, 59, 58], "column_pointers": [0, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 118]}, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618811377824, "name": "*", "id": -7087282165572552477, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618811377872, "name": "Column vector of length 60", "id": 3233310656130415734, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "entries": [[3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335]], "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618815200432, "name": "y[802:862]", "id": -1497975616651879837, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 802, "stop": 862, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618811104048, "name": "@", "id": -8175925199175048537, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618811104096, "name": "Sparse Matrix (61, 60)", "id": 2817503278790292380, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [61, 60], "data": [199999.99999999994, -199999.99999999994, 199999.99999999994, -199999.99999999994, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 199999.99999999988, -199999.99999999988, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 199999.99999999948, -199999.99999999948, 200000.00000000055, -200000.00000000055, 199999.99999999948, -199999.99999999948, 200000.00000000055, -200000.00000000055, 199999.99999999948, -199999.99999999948, 200000.00000000055, -200000.00000000055, 199999.99999999948, -199999.99999999948, 320000.0000000005, -320000.0000000005, 800000.0000000065, -800000.0000000065, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 800000.0000000065, -800000.0000000065, 799999.9999999979, -799999.9999999979, 800000.0000000065, -800000.0000000065, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 800000.0000000065, -800000.0000000065, 799999.9999999979, -799999.9999999979, 800000.0000000065, -800000.0000000065, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 319999.9999999992, -319999.9999999992, 199999.99999999948, -199999.99999999948, 200000.00000000163, -200000.00000000163, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 200000.00000000163, -200000.00000000163, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 200000.00000000163, -200000.00000000163, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 200000.00000000163, -200000.00000000163, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 200000.00000000163, -200000.00000000163, 199999.99999999948, -199999.99999999948], "row_indices": [1, 0, 2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9, 11, 10, 12, 11, 13, 12, 14, 13, 15, 14, 16, 15, 17, 16, 18, 17, 19, 18, 20, 19, 21, 20, 22, 21, 23, 22, 24, 23, 25, 24, 26, 25, 27, 26, 28, 27, 29, 28, 30, 29, 31, 30, 32, 31, 33, 32, 34, 33, 35, 34, 36, 35, 37, 36, 38, 37, 39, 38, 40, 39, 41, 40, 42, 41, 43, 42, 44, 43, 45, 44, 46, 45, 47, 46, 48, 47, 49, 48, 50, 49, 51, 50, 52, 51, 53, 52, 54, 53, 55, 54, 56, 55, 57, 56, 58, 57, 59, 58], "column_pointers": [0, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 118]}, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618811104192, "name": "+", "id": -2797058246405499666, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813603360, "name": "-0.175189434028335", "id": 7119419765525498274, "value": -0.175189434028335, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618811103952, "name": "y[902:962]", "id": -1861720831281011854, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 902, "stop": 962, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}]}]}]}]}]}]}]}]}, "concatenated_algebraic": {"py/object": "pybamm.expression_tree.concatenations.NumpyConcatenation", "py/id": 130618810303696, "name": "numpy_concatenation", "id": 3666217374919767843, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618810153968, "name": "-", "id": 5350031253912511805, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618810140288, "name": "*", "id": 6722313672175530380, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618811799632, "name": "0.009112499999999999", "id": -1429906504843080849, "value": 0.009112499999999999, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618813350160, "name": "*", "id": 5011301037419029294, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812691520, "name": "*", "id": 1616801225961756727, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812980144, "name": "2.0", "id": -5152612468232829164, "value": 2.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812691472, "name": "*", "id": 1550879348602589526, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812692048, "name": "*", "id": -8168648470131736160, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812694016, "name": "*", "id": 1489928314745703231, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813600240, "name": "2e-05", "id": 4013417785191156942, "value": 2e-05, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Power", "py/id": 130618812478624, "name": "**", "id": -2968840177917711684, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618813356496, "name": "maximum", "id": 1518251857377620986, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618813350112, "name": "*", "id": 1427763863586884248, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813350736, "name": "3333.3333333333335", "id": -6323253136627928067, "value": 3333.3333333333335, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618905580832, "name": "y[802:822]", "id": 7690233847097366697, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 802, "stop": 822, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812904896, "name": "1e-08", "id": 8264878393496015688, "value": 1e-08, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813599232, "name": "0.5", "id": 8689907665561100849, "value": 0.5, "children": []}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Power", "py/id": 130618812128176, "name": "**", "id": -4608803328745439545, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618816498048, "name": "maximum", "id": -1081378646585160925, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812321520, "name": "minimum", "id": -3863167891292241672, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812481456, "name": "@", "id": -7187558079876947875, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812692672, "name": "Sparse Matrix (20, 400)", "id": -6997513742234494012, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813597600, "name": "24983.261744011077", "id": 4240369327199516886, "value": 24983.261744011077, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813597936, "name": "0.000249832619938437", "id": 433485535404929403, "value": 0.000249832619938437, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813599232, "name": "0.5", "id": 8689907665561100849, "value": 0.5, "children": []}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Power", "py/id": 130618812682208, "name": "**", "id": -6925208073502469590, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812693344, "name": "-", "id": 7338248899687164424, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813360192, "name": "Maximum concentration in negative electrode [mol.m-3]", "id": 1403618475143340938, "value": 24983.2619938437, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618816498048, "name": "maximum", "id": -1081378646585160925, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812321520, "name": "minimum", "id": -3863167891292241672, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812481456, "name": "@", "id": -7187558079876947875, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812692672, "name": "Sparse Matrix (20, 400)", "id": -6997513742234494012, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813597600, "name": "24983.261744011077", "id": 4240369327199516886, "value": 24983.261744011077, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813597936, "name": "0.000249832619938437", "id": 433485535404929403, "value": 0.000249832619938437, "children": []}]}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813599232, "name": "0.5", "id": 8689907665561100849, "value": 0.5, "children": []}]}]}]}, {"py/object": "pybamm.expression_tree.functions.Sinh", "py/id": 130618893925744, "name": "function (sinh)", "id": -7417955762921766981, "function": "sinh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130619684477824, "name": "*", "id": -6377026607472615587, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618886457344, "name": "19.460872247804556", "id": 6066586310732700454, "value": 19.460872247804556, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812693680, "name": "-", "id": -3455383846556825401, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812690224, "name": "-", "id": 6531123047546519025, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812134416, "name": "y[862:882]", "id": 3768437392307318697, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 862, "stop": 882, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812690128, "name": "+", "id": -9057465236387790657, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813603360, "name": "-0.175189434028335", "id": 7119419765525498274, "value": -0.175189434028335, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812689744, "name": "y[902:922]", "id": 9166663523892018386, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 902, "stop": 922, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812693008, "name": "+", "id": 3170897706092531731, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812679328, "name": "+", "id": -2777145571203767738, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812747840, "name": "-", "id": -5660318420995079994, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812747216, "name": "-", "id": -8648600629949224676, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812746544, "name": "-", "id": -5891325346290398064, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812745872, "name": "-", "id": -3350222043601992656, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812745632, "name": "-", "id": 5457203170190986492, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812556704, "name": "-", "id": -4410910365300563589, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812684752, "name": "+", "id": -2628742156004538940, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812679808, "name": "+", "id": 2758625630139523814, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813605808, "name": "0.194", "id": 7740175521299642395, "value": 0.194, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812681584, "name": "*", "id": -3520860642976347259, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813606576, "name": "1.5", "id": 139763743454655332, "value": 1.5, "children": []}, {"py/object": "pybamm.expression_tree.functions.Exp", "py/id": 130618813768064, "name": "function (exp)", "id": -1991600572700148071, "function": "exp", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812681824, "name": "*", "id": -1142695973840209058, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813606096, "name": "-120.0", "id": -2666327541602118939, "value": -120.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812688832, "name": "*", "id": 1557036889693772453, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813606432, "name": "0.0351", "id": -6038329582079776216, "value": 0.0351, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812678896, "name": "function (tanh)", "id": 5845740464714440657, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812684800, "name": "+", "id": 5985495665387707307, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813602112, "name": "-3.44578313253012", "id": 8414662192146109933, "value": -3.44578313253012, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812679712, "name": "*", "id": -8867531115730044939, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813600096, "name": "12.048192771084336", "id": 2286773060606674287, "value": 12.048192771084336, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812556320, "name": "*", "id": 2987832948571782069, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813604944, "name": "0.0045", "id": -7336862686117729124, "value": 0.0045, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812680960, "name": "function (tanh)", "id": 1000424540452344079, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812688256, "name": "+", "id": 2500977860664972913, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813598128, "name": "-7.1344537815126055", "id": -2008027762916420739, "value": -7.1344537815126055, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812686192, "name": "*", "id": 6841719940451303636, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813599472, "name": "8.403361344537815", "id": 5137747773265705339, "value": 8.403361344537815, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812745488, "name": "*", "id": 2593665060573518236, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813600816, "name": "0.035", "id": 5340442218001158498, "value": 0.035, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812687536, "name": "function (tanh)", "id": 3525689365544371876, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812745296, "name": "+", "id": 7472497014997641358, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813363648, "name": "-18.466", "id": 2698408429651132352, "value": -18.466, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812744864, "name": "*", "id": 5236413183585979948, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813365904, "name": "20.0", "id": -2315749538005855916, "value": 20.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812745728, "name": "*", "id": -6222388883410834833, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813661360, "name": "0.0147", "id": 865196841519913110, "value": 0.0147, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812744144, "name": "function (tanh)", "id": -2237366335376051250, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812744288, "name": "+", "id": 737201374737237077, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813662512, "name": "-14.705882352941176", "id": 2973855845376108883, "value": -14.705882352941176, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812744816, "name": "*", "id": 1442672162688177164, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813662320, "name": "29.41176470588235", "id": -113256828160498776, "value": 29.41176470588235, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812746400, "name": "*", "id": -8458121232804279703, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813661552, "name": "0.102", "id": -1850981887219250428, "value": 0.102, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812745104, "name": "function (tanh)", "id": -3780828074974052996, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812746208, "name": "+", "id": 6961685620758259702, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813663760, "name": "-1.3661971830985917", "id": 7893090581833987542, "value": -1.3661971830985917, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812746064, "name": "*", "id": -1435395326191985150, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813663520, "name": "7.042253521126761", "id": -8437487278446070949, "value": 7.042253521126761, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812747072, "name": "*", "id": 5962223132358208642, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813664624, "name": "0.022", "id": -7588270992824822451, "value": 0.022, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812745968, "name": "function (tanh)", "id": -3444838196878594690, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812746880, "name": "+", "id": 7178807879491518423, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813664960, "name": "-54.8780487804878", "id": 336533465918387103, "value": -54.8780487804878, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812746736, "name": "*", "id": -3772427557061202442, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813664720, "name": "60.975609756097555", "id": -3846185782827536214, "value": 60.975609756097555, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812747696, "name": "*", "id": 8302701633561226124, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813665392, "name": "0.011", "id": 7061990918433917315, "value": 0.011, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812746640, "name": "function (tanh)", "id": -4667093808057287353, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812747552, "name": "+", "id": -333759140474274285, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813666304, "name": "-5.486725663716814", "id": 596050542444722654, "value": -5.486725663716814, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812747408, "name": "*", "id": 7931455061119874708, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813666064, "name": "44.24778761061947", "id": -8600761206958233429, "value": 44.24778761061947, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812681728, "name": "*", "id": 2663053549108018989, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813665776, "name": "0.0155", "id": 2465743936332173434, "value": 0.0155, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812132832, "name": "function (tanh)", "id": 2887192342577501511, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618880710208, "name": "+", "id": -7435334446882785747, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813667552, "name": "-3.6206896551724133", "id": 840276053350863505, "value": -3.6206896551724133, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812748032, "name": "*", "id": -3544537289702228274, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813667312, "name": "34.48275862068965", "id": -5637925993549098701, "value": 34.48275862068965, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812691328, "name": "*", "id": -7538571070900019829, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814229696, "name": "1e-06", "id": -2580769557222913764, "value": 1e-06, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812691760, "name": "+", "id": 7736217800210834407, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Division", "py/id": 130618812688544, "name": "/", "id": 8420292910285788713, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814315792, "name": "1.0", "id": -2100809710563135213, "value": 1.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Division", "py/id": 130618812689936, "name": "/", "id": -2317948313576916529, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814315792, "name": "1.0", "id": -2100809710563135213, "value": 1.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812690176, "name": "+", "id": -8577457382471511308, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130619696064528, "name": "-1.0", "id": -5413240934256496585, "value": -1.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618810153536, "name": "@", "id": -789517096041527835, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618810153920, "name": "Sparse Matrix (20, 20)", "id": 3377134945797936125, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 20], "data": [118596.55876120513, -355789.67628361547, 118596.55876120513, -237193.11752241026, 118596.55876120513, 118596.55876120519, -237193.11752241026, 118596.55876120512, 118596.55876120523, -237193.11752241047, 118596.55876120523, 118596.55876120513, -237193.11752241038, 118596.55876120523, 118596.55876120513, -237193.11752241018, 118596.55876120503, 118596.55876120523, -237193.11752241047, 118596.55876120523, 118596.55876120523, -237193.11752241047, 118596.55876120523, 118596.55876120523, -237193.11752241047, 118596.55876120523, 118596.55876120523, -237193.11752241047, 118596.55876120523, 118596.55876120523, -237193.11752241047, 118596.55876120523, 118596.55876120506, -237193.11752241012, 118596.55876120506, 118596.55876120488, -237193.11752241012, 118596.55876120523, 118596.55876120552, -237193.1175224104, 118596.55876120488, 118596.55876120488, -237193.1175224104, 118596.55876120552, 118596.55876120552, -237193.1175224104, 118596.55876120488, 118596.55876120488, -237193.1175224104, 118596.55876120552, 118596.55876120552, -237193.1175224104, 118596.55876120488, 118596.55876120488, -237193.1175224104, 118596.55876120552, -118596.55876120488, 118596.55876120488], "row_indices": [1, 0, 2, 1, 0, 3, 2, 1, 4, 3, 2, 5, 4, 3, 6, 5, 4, 7, 6, 5, 8, 7, 6, 9, 8, 7, 10, 9, 8, 11, 10, 9, 12, 11, 10, 13, 12, 11, 14, 13, 12, 15, 14, 13, 16, 15, 14, 17, 16, 15, 18, 17, 16, 19, 18, 17, 19, 18], "column_pointers": [0, 2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 47, 50, 53, 56, 58]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812134416, "name": "y[862:882]", "id": 3768437392307318697, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 862, "stop": 882, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618810302832, "name": "-", "id": -6267677605180888562, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618810154064, "name": "*", "id": 3701854391193133796, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618811808656, "name": "0.00759375", "id": 7336952334383097846, "value": 0.00759375, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812756432, "name": "*", "id": -2991990513920916566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812749856, "name": "*", "id": -4360211028544939589, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812980144, "name": "2.0", "id": -5152612468232829164, "value": 2.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812749712, "name": "*", "id": 7720798338140752300, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812748368, "name": "*", "id": 7537189032895441055, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812745440, "name": "*", "id": 3408340872438249903, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813356880, "name": "6e-07", "id": 355168022731336579, "value": 6e-07, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Power", "py/id": 130618812744240, "name": "**", "id": -8623461634867238515, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812748080, "name": "maximum", "id": -3962336837355174394, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812746496, "name": "*", "id": -2628472635338675085, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812746352, "name": "3333.3333333333335", "id": -6323253136627928067, "value": 3333.3333333333335, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812690944, "name": "y[842:862]", "id": -649962113286084747, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 842, "stop": 862, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812904896, "name": "1e-08", "id": 8264878393496015688, "value": 1e-08, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813599232, "name": "0.5", "id": 8689907665561100849, "value": 0.5, "children": []}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Power", "py/id": 130618812748128, "name": "**", "id": 237302561589010522, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812748752, "name": "maximum", "id": -8188174639366095977, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812749376, "name": "minimum", "id": 3993867167987437362, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812748896, "name": "@", "id": 6826236906824664973, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812749040, "name": "Sparse Matrix (20, 400)", "id": -7753167272989850642, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813358416, "name": "51217.92521874824", "id": -4609095240902580030, "value": 51217.92521874824, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813356304, "name": "0.000512179257309275", "id": 7133712376225145202, "value": 0.000512179257309275, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813599232, "name": "0.5", "id": 8689907665561100849, "value": 0.5, "children": []}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Power", "py/id": 130618812748800, "name": "**", "id": 1917811863503173755, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812749568, "name": "-", "id": -1246477591419729199, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813360432, "name": "Maximum concentration in positive electrode [mol.m-3]", "id": 8933524311479642027, "value": 51217.9257309275, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812748752, "name": "maximum", "id": -8188174639366095977, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812749376, "name": "minimum", "id": 3993867167987437362, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812748896, "name": "@", "id": 6826236906824664973, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812749040, "name": "Sparse Matrix (20, 400)", "id": -7753167272989850642, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813358416, "name": "51217.92521874824", "id": -4609095240902580030, "value": 51217.92521874824, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813356304, "name": "0.000512179257309275", "id": 7133712376225145202, "value": 0.000512179257309275, "children": []}]}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813599232, "name": "0.5", "id": 8689907665561100849, "value": 0.5, "children": []}]}]}]}, {"py/object": "pybamm.expression_tree.functions.Sinh", "py/id": 130618812748512, "name": "function (sinh)", "id": 9195165020260810540, "function": "sinh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812756240, "name": "*", "id": 1252999716597568335, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618886457344, "name": "19.460872247804556", "id": 6066586310732700454, "value": 19.460872247804556, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812756096, "name": "-", "id": 1438129123663594719, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812750528, "name": "-", "id": -4978577623806477239, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812750192, "name": "+", "id": 6180502162786781022, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813767920, "name": "3.8518235799803935", "id": 620304935402715880, "value": 3.8518235799803935, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812748608, "name": "y[882:902]", "id": 3054093096792367542, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 882, "stop": 902, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812750432, "name": "+", "id": 813362874902076708, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813603360, "name": "-0.175189434028335", "id": 7119419765525498274, "value": -0.175189434028335, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812750000, "name": "y[942:962]", "id": -870805730609750089, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 942, "stop": 962, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812755952, "name": "+", "id": 5123365761583074500, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812755088, "name": "-", "id": -8152118321675099416, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812754416, "name": "+", "id": 4998606054031930750, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812753792, "name": "+", "id": 5431271169514107080, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812753168, "name": "-", "id": 5818032960006493050, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812752496, "name": "+", "id": 6459499933431406763, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812751824, "name": "+", "id": 5849756346192955011, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813774208, "name": "2.16216", "id": 7088823027077335540, "value": 2.16216, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812751680, "name": "*", "id": -7390914559135385331, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813773920, "name": "0.07645", "id": 3467962075886846323, "value": 0.07645, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812750288, "name": "function (tanh)", "id": -4058806610612652244, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812751488, "name": "-", "id": -3479755179842202475, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813772960, "name": "30.834", "id": 6311483360681990758, "value": 30.834, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812751344, "name": "*", "id": -6849675900790099540, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813773200, "name": "57.858397200000006", "id": 8027320023713144814, "value": 57.858397200000006, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812750912, "name": "maximum", "id": 2122434397506504971, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812750048, "name": "minimum", "id": 6918834552341564157, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812750768, "name": "@", "id": -8558974238558345566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812750960, "name": "Sparse Matrix (20, 400)", "id": 7194773163440000726, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812752352, "name": "*", "id": 6289715363493954645, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130620427939200, "name": "2.1581", "id": 543019129418541479, "value": 2.1581, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812751248, "name": "function (tanh)", "id": 5704247280564288049, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812752160, "name": "-", "id": -7785982527032588290, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814709888, "name": "52.294", "id": 5665295360841558076, "value": 52.294, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812752016, "name": "*", "id": 7025941896119654872, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813774880, "name": "53.412228", "id": 2461957677817975307, "value": 53.412228, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812750912, "name": "maximum", "id": 2122434397506504971, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812750048, "name": "minimum", "id": 6918834552341564157, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812750768, "name": "@", "id": -8558974238558345566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812750960, "name": "Sparse Matrix (20, 400)", "id": 7194773163440000726, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812753024, "name": "*", "id": 1211148563028459181, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130620416434512, "name": "0.14169", "id": -3419048817258058669, "value": 0.14169, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812751920, "name": "function (tanh)", "id": -7754066623758951276, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812752832, "name": "-", "id": 4207632483616887984, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130620416436432, "name": "11.0923", "id": -5503757140826160107, "value": 11.0923, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812752688, "name": "*", "id": 2133528354538859689, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130620416433696, "name": "21.0852666", "id": -3344716853701631705, "value": 21.0852666, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812750912, "name": "maximum", "id": 2122434397506504971, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812750048, "name": "minimum", "id": 6918834552341564157, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812750768, "name": "@", "id": -8558974238558345566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812750960, "name": "Sparse Matrix (20, 400)", "id": 7194773163440000726, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812753648, "name": "*", "id": 4659861442619171071, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813351552, "name": "0.2051", "id": 7458922957963772, "value": 0.2051, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812752592, "name": "function (tanh)", "id": 2252511426160844267, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812753456, "name": "-", "id": 6802236584016486100, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813352464, "name": "1.4684", "id": 3418309655544577912, "value": 1.4684, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812753360, "name": "*", "id": 286367983352007038, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813353424, "name": "5.829105600000001", "id": 3261629117311082741, "value": 5.829105600000001, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812750912, "name": "maximum", "id": 2122434397506504971, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812750048, "name": "minimum", "id": 6918834552341564157, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812750768, "name": "@", "id": -8558974238558345566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812750960, "name": "Sparse Matrix (20, 400)", "id": 7194773163440000726, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812754272, "name": "*", "id": -4560397341261300114, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813357408, "name": "0.2531", "id": -5004762162693954208, "value": 0.2531, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812753264, "name": "function (tanh)", "id": -6502476172759175316, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812754128, "name": "-", "id": 342744639602009179, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813364128, "name": "4.291641337386018", "id": -5528541941614304321, "value": 4.291641337386018, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812753984, "name": "*", "id": -2121849807242607481, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813267696, "name": "8.069908814589667", "id": 1675063614458922122, "value": 8.069908814589667, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812750912, "name": "maximum", "id": 2122434397506504971, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812750048, "name": "minimum", "id": 6918834552341564157, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812750768, "name": "@", "id": -8558974238558345566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812750960, "name": "Sparse Matrix (20, 400)", "id": 7194773163440000726, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812754944, "name": "*", "id": -2927027548940809717, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813610704, "name": "0.02167", "id": -8590452496054267420, "value": 0.02167, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812753888, "name": "function (tanh)", "id": -7208229040751314603, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812754752, "name": "+", "id": -5840170938271985206, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813609648, "name": "-87.5", "id": -4786059711555051945, "value": -87.5, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812754608, "name": "*", "id": 6139688208598473797, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813607776, "name": "177.0", "id": 217763134228642563, "value": 177.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812750912, "name": "maximum", "id": 2122434397506504971, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812750048, "name": "minimum", "id": 6918834552341564157, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812750768, "name": "@", "id": -8558974238558345566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812750960, "name": "Sparse Matrix (20, 400)", "id": 7194773163440000726, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812755808, "name": "*", "id": 5501256929259757199, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814229696, "name": "1e-06", "id": -2580769557222913764, "value": 1e-06, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812755664, "name": "+", "id": 4992724793048039161, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Division", "py/id": 130618812754848, "name": "/", "id": 8756252382160020078, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814315792, "name": "1.0", "id": -2100809710563135213, "value": 1.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812750912, "name": "maximum", "id": 2122434397506504971, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812750048, "name": "minimum", "id": 6918834552341564157, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812750768, "name": "@", "id": -8558974238558345566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812750960, "name": "Sparse Matrix (20, 400)", "id": 7194773163440000726, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Division", "py/id": 130618812755232, "name": "/", "id": 7349184667665570886, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814315792, "name": "1.0", "id": -2100809710563135213, "value": 1.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812755376, "name": "+", "id": -2510922712789457241, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130619696064528, "name": "-1.0", "id": -5413240934256496585, "value": -1.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812750912, "name": "maximum", "id": 2122434397506504971, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812750048, "name": "minimum", "id": 6918834552341564157, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812750768, "name": "@", "id": -8558974238558345566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812750960, "name": "Sparse Matrix (20, 400)", "id": 7194773163440000726, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618810303504, "name": "+", "id": -661325393189988615, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618810303312, "name": "Column vector of length 20", "id": 3750643338440817719, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "entries": [[0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [-0.24299999999999933]], "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618810303408, "name": "@", "id": -8153759621287356695, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618810303600, "name": "Sparse Matrix (20, 20)", "id": 4524002111546824257, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 20], "data": [-11859.655876120458, 11859.655876120458, 11859.655876120649, 11859.655876120521, -23719.31175224117, 11859.655876120521, 11859.655876120649, -23719.31175224117, 11859.655876120458, 11859.655876120458, -23719.311752240916, 11859.655876120458, 11859.655876120458, -23719.311752240916, 11859.655876120649, 11859.655876120521, -23719.31175224117, 11859.655876120521, 11859.655876120649, -23719.31175224117, 11859.655876120458, 11859.655876120458, -23719.311752240916, 11859.655876120458, 11859.655876120458, -23719.311752240916, 11859.655876120649, 11859.655876120521, -23719.31175224117, 11859.655876120521, 11859.655876120649, -23719.31175224117, 11859.655876120458, 11859.655876120458, -23719.311752240916, 11859.655876120458, 11859.655876120458, -23719.311752240916, 11859.655876120649, 11859.655876120521, -23719.31175224117, 11859.655876120521, 11859.655876120649, -23719.31175224117, 11859.655876120458, 11859.655876120458, -23719.311752240916, 11859.655876120458, 11859.655876120458, -23719.311752240916, 11859.655876120649, 11859.655876120521, -23719.31175224117, 11859.655876120521, 11859.655876120649, -23719.31175224117, 11859.655876120458, -11859.655876120458], "row_indices": [0, 1, 2, 0, 1, 3, 1, 2, 4, 2, 3, 5, 3, 4, 6, 4, 5, 7, 5, 6, 8, 6, 7, 9, 7, 8, 10, 8, 9, 11, 9, 10, 12, 10, 11, 13, 11, 12, 14, 12, 13, 15, 13, 14, 16, 14, 15, 17, 15, 16, 18, 16, 17, 19, 17, 18, 18, 19], "column_pointers": [0, 2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 47, 50, 53, 56, 58]}, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812750192, "name": "+", "id": 6180502162786781022, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813767920, "name": "3.8518235799803935", "id": 620304935402715880, "value": 3.8518235799803935, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812748608, "name": "y[882:902]", "id": 3054093096792367542, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 882, "stop": 902, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618810305472, "name": "-", "id": 8939865266978205354, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618810304464, "name": "@", "id": 6772432344454427398, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618810304608, "name": "Sparse Matrix (60, 61)", "id": 4509882024419778870, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [60, 61], "data": [-0.010124999999999999, 0.010124999999999999, -0.010124999999999999, 0.010124999999999999, -0.010124999999999997, 0.010124999999999997, -0.010125, 0.010125, -0.010125, 0.010125, -0.010124999999999993, 0.010124999999999993, -0.010125, 0.010125, -0.010125, 0.010125, -0.010125, 0.010125, -0.010125, 0.010125, -0.010125, 0.010125, -0.010124999999999986, 0.010124999999999986, -0.010125, 0.010125, -0.010125, 0.010125, -0.010125, 0.010125, -0.010125, 0.010125, -0.010125, 0.010125, -0.010125, 0.010125, -0.010125, 0.010125, -0.010125, 0.010125, -0.04049999999999989, 0.04049999999999989, -0.04050000000000033, 0.04050000000000033, -0.04049999999999989, 0.04049999999999989, -0.04049999999999989, 0.04049999999999989, -0.04049999999999989, 0.04049999999999989, -0.04049999999999989, 0.04049999999999989, -0.04050000000000033, 0.04050000000000033, -0.04049999999999989, 0.04049999999999989, -0.04049999999999989, 0.04049999999999989, -0.04050000000000033, 0.04050000000000033, -0.04049999999999989, 0.04049999999999989, -0.04049999999999989, 0.04049999999999989, -0.04049999999999989, 0.04049999999999989, -0.04049999999999989, 0.04049999999999989, -0.04050000000000033, 0.04050000000000033, -0.04049999999999989, 0.04049999999999989, -0.04049999999999989, 0.04049999999999989, -0.04050000000000033, 0.04050000000000033, -0.04049999999999989, 0.04049999999999989, -0.04049999999999989, 0.04049999999999989, -0.010124999999999973, 0.010124999999999973, -0.010125000000000028, 0.010125000000000028, -0.010125000000000028, 0.010125000000000028, -0.010124999999999973, 0.010124999999999973, -0.010124999999999973, 0.010124999999999973, -0.010125000000000028, 0.010125000000000028, -0.010125000000000028, 0.010125000000000028, -0.010124999999999973, 0.010124999999999973, -0.010124999999999973, 0.010124999999999973, -0.010125000000000028, 0.010125000000000028, -0.010125000000000028, 0.010125000000000028, -0.010124999999999973, 0.010124999999999973, -0.010124999999999973, 0.010124999999999973, -0.010125000000000028, 0.010125000000000028, -0.010125000000000028, 0.010125000000000028, -0.010124999999999973, 0.010124999999999973, -0.010124999999999973, 0.010124999999999973, -0.010125000000000028, 0.010125000000000028, -0.010125000000000028, 0.010125000000000028, -0.010124999999999973, 0.010124999999999973], "row_indices": [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 53, 53, 54, 54, 55, 55, 56, 56, 57, 57, 58, 58, 59, 59, 60], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120]}, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618811377056, "name": "*", "id": -5089305978489753413, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618811377440, "name": "@", "id": -7103631496081522351, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618811377776, "name": "Sparse Matrix (61, 60)", "id": -8944274321525373426, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [61, 60], "data": [1.5, -0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, -0.5, 1.5], "row_indices": [0, 1, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 53, 53, 54, 54, 55, 55, 56, 56, 57, 57, 58, 58, 59, 58, 59], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122]}, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618811516496, "name": "+", "id": -2596386414150797407, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618811515104, "name": "-", "id": -4298272443359732609, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618811382624, "name": "+", "id": 4362082203920958720, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618811379840, "name": "Column vector of length 60", "id": 7474458076266660885, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "entries": [[0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.0911], [0.0911], [0.0911], [0.0911], [0.0911], [0.0911], [0.0911], [0.0911], [0.0911], [0.0911], [0.0911], [0.0911], [0.0911], [0.0911], [0.0911], [0.0911], [0.0911], [0.0911], [0.0911], [0.0911], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187], [0.014969257496616187]], "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618811381712, "name": "*", "id": -8986568805529309312, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618811381136, "name": "Column vector of length 60", "id": 6658175142160178423, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "entries": [[0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.0019100999999999999], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525], [0.00031386145712718525]], "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618811381808, "name": "maximum", "id": 199891664379383001, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618811377824, "name": "*", "id": -7087282165572552477, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618811377872, "name": "Column vector of length 60", "id": 3233310656130415734, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "entries": [[3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335]], "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618815200432, "name": "y[802:862]", "id": -1497975616651879837, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 802, "stop": 862, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813105024, "name": "10.0", "id": -2130856396031236225, "value": 10.0, "children": []}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618811514960, "name": "*", "id": 2683586088285518310, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618811379024, "name": "Column vector of length 60", "id": 7121976820624321495, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "entries": [[1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.052e-06], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07], [1.728612391486304e-07]], "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Power", "py/id": 130618811382960, "name": "**", "id": 8632101989791892141, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618811381808, "name": "maximum", "id": 199891664379383001, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618811377824, "name": "*", "id": -7087282165572552477, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618811377872, "name": "Column vector of length 60", "id": 3233310656130415734, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "entries": [[3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335]], "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618815200432, "name": "y[802:862]", "id": -1497975616651879837, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 802, "stop": 862, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813105024, "name": "10.0", "id": -2130856396031236225, "value": 10.0, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812980144, "name": "2.0", "id": -5152612468232829164, "value": 2.0, "children": []}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618811516352, "name": "*", "id": -1392339005773521319, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618811383056, "name": "Column vector of length 60", "id": 7463879151780490101, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "entries": [[2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [1.5540000000000003e-10], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11], [2.5534825630890845e-11]], "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Power", "py/id": 130618811515440, "name": "**", "id": 7179531833336685979, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618811381808, "name": "maximum", "id": 199891664379383001, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618811377824, "name": "*", "id": -7087282165572552477, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618811377872, "name": "Column vector of length 60", "id": 3233310656130415734, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "entries": [[3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335]], "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618815200432, "name": "y[802:862]", "id": -1497975616651879837, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 802, "stop": 862, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813105024, "name": "10.0", "id": -2130856396031236225, "value": 10.0, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814416608, "name": "3.0", "id": 653269463420665749, "value": 3.0, "children": []}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618811380128, "name": "-", "id": 5576173810077200252, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618811383008, "name": "*", "id": -6114186157527307168, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618811380368, "name": "+", "id": 6306925410857167843, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618811382912, "name": "@", "id": 3305305752991763257, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618811381760, "name": "Sparse Matrix (61, 60)", "id": 6759687596726471679, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [61, 60], "data": [1.5, -0.5, -0.5, 1.5], "row_indices": [0, 1, 58, 59], "column_pointers": [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4]}, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Division", "py/id": 130618811516736, "name": "/", "id": -883719485587817014, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618811929984, "name": "0.03083109494579247", "id": 8953813036898841515, "value": 0.03083109494579247, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618811515536, "name": "maximum", "id": 3389031811675203979, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618811377824, "name": "*", "id": -7087282165572552477, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618811377872, "name": "Column vector of length 60", "id": 3233310656130415734, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "entries": [[3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335]], "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618815200432, "name": "y[802:862]", "id": -1497975616651879837, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 802, "stop": 862, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814714592, "name": "0.01", "id": 6256201899258323752, "value": 0.01, "children": []}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618811380704, "name": "@", "id": 90298605494455894, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618811383104, "name": "Sparse Matrix (61, 59)", "id": -365787623448435183, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [61, 59], "data": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "row_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "column_pointers": [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 59]}, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Division", "py/id": 130618811519376, "name": "/", "id": 2016845760196750717, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618811519088, "name": "1.0", "id": -2100809710563135213, "value": 1.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618811519136, "name": "+", "id": 176183255117486591, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Division", "py/id": 130618811518896, "name": "/", "id": -1406177667139331642, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.array.Array", "py/id": 130618815191552, "name": "Array of shape (59, 1)", "id": 8568112573815089312, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": [[0.5], [0.4999999999999999], [0.5000000000000001], [0.5], [0.49999999999999983], [0.5000000000000002], [0.5], [0.5], [0.5], [0.5], [0.49999999999999967], [0.5000000000000003], [0.5], [0.5], [0.5], [0.5], [0.5], [0.5], [0.5], [0.7999999999999996], [0.5000000000000027], [0.4999999999999973], [0.5], [0.5], [0.5], [0.5000000000000027], [0.4999999999999973], [0.5], [0.5000000000000027], [0.4999999999999973], [0.5], [0.5], [0.5], [0.5000000000000027], [0.4999999999999973], [0.5], [0.5000000000000027], [0.4999999999999973], [0.5], [0.2], [0.5000000000000013], [0.5], [0.49999999999999867], [0.5], [0.5000000000000013], [0.5], [0.49999999999999867], [0.5], [0.5000000000000013], [0.5], [0.49999999999999867], [0.5], [0.5000000000000013], [0.5], [0.49999999999999867], [0.5], [0.5000000000000013], [0.5], [0.49999999999999867]], "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618811517504, "name": "@", "id": -8798505101064682830, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618811517360, "name": "Sparse Matrix (59, 60)", "id": 2006731159766664994, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [59, 60], "data": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "row_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58], "column_pointers": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59]}, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Division", "py/id": 130618811516736, "name": "/", "id": -883719485587817014, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618811929984, "name": "0.03083109494579247", "id": 8953813036898841515, "value": 0.03083109494579247, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618811515536, "name": "maximum", "id": 3389031811675203979, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618811377824, "name": "*", "id": -7087282165572552477, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618811377872, "name": "Column vector of length 60", "id": 3233310656130415734, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "entries": [[3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335]], "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618815200432, "name": "y[802:862]", "id": -1497975616651879837, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 802, "stop": 862, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814714592, "name": "0.01", "id": 6256201899258323752, "value": 0.01, "children": []}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Division", "py/id": 130618811518320, "name": "/", "id": 4118198602642349166, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618811519184, "name": "Column vector of length 59", "id": 5504116970975098652, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": [[0.5], [0.5000000000000001], [0.4999999999999999], [0.5], [0.5000000000000002], [0.4999999999999998], [0.5], [0.5], [0.5], [0.5], [0.5000000000000003], [0.49999999999999967], [0.5], [0.5], [0.5], [0.5], [0.5], [0.5], [0.5], [0.2000000000000004], [0.49999999999999734], [0.5000000000000027], [0.5], [0.5], [0.5], [0.49999999999999734], [0.5000000000000027], [0.5], [0.49999999999999734], [0.5000000000000027], [0.5], [0.5], [0.5], [0.49999999999999734], [0.5000000000000027], [0.5], [0.49999999999999734], [0.5000000000000027], [0.5], [0.8], [0.49999999999999867], [0.5], [0.5000000000000013], [0.5], [0.49999999999999867], [0.5], [0.5000000000000013], [0.5], [0.49999999999999867], [0.5], [0.5000000000000013], [0.5], [0.49999999999999867], [0.5], [0.5000000000000013], [0.5], [0.49999999999999867], [0.5], [0.5000000000000013]], "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618811518560, "name": "@", "id": -7602252075786383158, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618811518512, "name": "Sparse Matrix (59, 60)", "id": 2082807614786886189, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [59, 60], "data": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "row_indices": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], "column_pointers": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59]}, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Division", "py/id": 130618811516736, "name": "/", "id": -883719485587817014, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618811929984, "name": "0.03083109494579247", "id": 8953813036898841515, "value": 0.03083109494579247, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618811515536, "name": "maximum", "id": 3389031811675203979, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618811377824, "name": "*", "id": -7087282165572552477, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618811377872, "name": "Column vector of length 60", "id": 3233310656130415734, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "entries": [[3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335]], "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618815200432, "name": "y[802:862]", "id": -1497975616651879837, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 802, "stop": 862, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814714592, "name": "0.01", "id": 6256201899258323752, "value": 0.01, "children": []}]}]}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618811518176, "name": "@", "id": 9049577433437554950, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618811517888, "name": "Sparse Matrix (61, 60)", "id": 2817503278790292380, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [61, 60], "data": [199999.99999999994, -199999.99999999994, 199999.99999999994, -199999.99999999994, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 199999.99999999988, -199999.99999999988, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 199999.99999999948, -199999.99999999948, 200000.00000000055, -200000.00000000055, 199999.99999999948, -199999.99999999948, 200000.00000000055, -200000.00000000055, 199999.99999999948, -199999.99999999948, 200000.00000000055, -200000.00000000055, 199999.99999999948, -199999.99999999948, 320000.0000000005, -320000.0000000005, 800000.0000000065, -800000.0000000065, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 800000.0000000065, -800000.0000000065, 799999.9999999979, -799999.9999999979, 800000.0000000065, -800000.0000000065, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 800000.0000000065, -800000.0000000065, 799999.9999999979, -799999.9999999979, 800000.0000000065, -800000.0000000065, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 319999.9999999992, -319999.9999999992, 199999.99999999948, -199999.99999999948, 200000.00000000163, -200000.00000000163, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 200000.00000000163, -200000.00000000163, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 200000.00000000163, -200000.00000000163, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 200000.00000000163, -200000.00000000163, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 200000.00000000163, -200000.00000000163, 199999.99999999948, -199999.99999999948], "row_indices": [1, 0, 2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9, 11, 10, 12, 11, 13, 12, 14, 13, 15, 14, 16, 15, 17, 16, 18, 17, 19, 18, 20, 19, 21, 20, 22, 21, 23, 22, 24, 23, 25, 24, 26, 25, 27, 26, 28, 27, 29, 28, 30, 29, 31, 30, 32, 31, 33, 32, 34, 33, 35, 34, 36, 35, 37, 36, 38, 37, 39, 38, 40, 39, 41, 40, 42, 41, 43, 42, 44, 43, 45, 44, 46, 45, 47, 46, 48, 47, 49, 48, 50, 49, 51, 50, 52, 51, 53, 52, 54, 53, 55, 54, 56, 55, 57, 56, 58, 57, 59, 58], "column_pointers": [0, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 118]}, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618811377824, "name": "*", "id": -7087282165572552477, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618811377872, "name": "Column vector of length 60", "id": 3233310656130415734, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "entries": [[3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [1000.0], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335], [3333.3333333333335]], "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618815200432, "name": "y[802:862]", "id": -1497975616651879837, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 802, "stop": 862, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618811104048, "name": "@", "id": -8175925199175048537, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618811104096, "name": "Sparse Matrix (61, 60)", "id": 2817503278790292380, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [61, 60], "data": [199999.99999999994, -199999.99999999994, 199999.99999999994, -199999.99999999994, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 199999.99999999988, -199999.99999999988, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 200000.00000000003, -200000.00000000003, 199999.99999999948, -199999.99999999948, 200000.00000000055, -200000.00000000055, 199999.99999999948, -199999.99999999948, 200000.00000000055, -200000.00000000055, 199999.99999999948, -199999.99999999948, 200000.00000000055, -200000.00000000055, 199999.99999999948, -199999.99999999948, 320000.0000000005, -320000.0000000005, 800000.0000000065, -800000.0000000065, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 800000.0000000065, -800000.0000000065, 799999.9999999979, -799999.9999999979, 800000.0000000065, -800000.0000000065, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 800000.0000000065, -800000.0000000065, 799999.9999999979, -799999.9999999979, 800000.0000000065, -800000.0000000065, 799999.9999999979, -799999.9999999979, 799999.9999999979, -799999.9999999979, 319999.9999999992, -319999.9999999992, 199999.99999999948, -199999.99999999948, 200000.00000000163, -200000.00000000163, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 200000.00000000163, -200000.00000000163, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 200000.00000000163, -200000.00000000163, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 200000.00000000163, -200000.00000000163, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 199999.99999999948, -199999.99999999948, 200000.00000000163, -200000.00000000163, 199999.99999999948, -199999.99999999948], "row_indices": [1, 0, 2, 1, 3, 2, 4, 3, 5, 4, 6, 5, 7, 6, 8, 7, 9, 8, 10, 9, 11, 10, 12, 11, 13, 12, 14, 13, 15, 14, 16, 15, 17, 16, 18, 17, 19, 18, 20, 19, 21, 20, 22, 21, 23, 22, 24, 23, 25, 24, 26, 25, 27, 26, 28, 27, 29, 28, 30, 29, 31, 30, 32, 31, 33, 32, 34, 33, 35, 34, 36, 35, 37, 36, 38, 37, 39, 38, 40, 39, 41, 40, 42, 41, 43, 42, 44, 43, 45, 44, 46, 45, 47, 46, 48, 47, 49, 48, 50, 49, 51, 50, 52, 51, 53, 52, 54, 53, 55, 54, 56, 55, 57, 56, 58, 57, 59, 58], "column_pointers": [0, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 118]}, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618811104192, "name": "+", "id": -2797058246405499666, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813603360, "name": "-0.175189434028335", "id": 7119419765525498274, "value": -0.175189434028335, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618811103952, "name": "y[902:962]", "id": -1861720831281011854, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 902, "stop": 962, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.concatenations.DomainConcatenation", "py/id": 130618810304560, "name": "domain_concatenation", "id": 4876350006935281287, "domains": {"primary": ["negative electrode", "separator", "positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "slices": {"negative electrode": [{"start": 0, "stop": 20, "step": null}], "separator": [{"start": 20, "stop": 40, "step": null}], "positive electrode": [{"start": 40, "stop": 60, "step": null}]}, "size": 60, "children_slices": [{"negative electrode": [{"start": 0, "stop": 20, "step": null}]}, {"separator": [{"start": 0, "stop": 20, "step": null}]}, {"positive electrode": [{"start": 0, "stop": 20, "step": null}]}], "secondary_dimensions_npts": 1, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618810305136, "name": "*", "id": 6722313672175530380, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618810305184, "name": "0.009112499999999999", "id": -1429906504843080849, "value": 0.009112499999999999, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618813350160, "name": "*", "id": 5011301037419029294, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812691520, "name": "*", "id": 1616801225961756727, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812980144, "name": "2.0", "id": -5152612468232829164, "value": 2.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812691472, "name": "*", "id": 1550879348602589526, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812692048, "name": "*", "id": -8168648470131736160, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812694016, "name": "*", "id": 1489928314745703231, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813600240, "name": "2e-05", "id": 4013417785191156942, "value": 2e-05, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Power", "py/id": 130618812478624, "name": "**", "id": -2968840177917711684, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618813356496, "name": "maximum", "id": 1518251857377620986, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618813350112, "name": "*", "id": 1427763863586884248, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813350736, "name": "3333.3333333333335", "id": -6323253136627928067, "value": 3333.3333333333335, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618905580832, "name": "y[802:822]", "id": 7690233847097366697, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 802, "stop": 822, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812904896, "name": "1e-08", "id": 8264878393496015688, "value": 1e-08, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813599232, "name": "0.5", "id": 8689907665561100849, "value": 0.5, "children": []}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Power", "py/id": 130618812128176, "name": "**", "id": -4608803328745439545, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618816498048, "name": "maximum", "id": -1081378646585160925, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812321520, "name": "minimum", "id": -3863167891292241672, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812481456, "name": "@", "id": -7187558079876947875, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812692672, "name": "Sparse Matrix (20, 400)", "id": -6997513742234494012, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813597600, "name": "24983.261744011077", "id": 4240369327199516886, "value": 24983.261744011077, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813597936, "name": "0.000249832619938437", "id": 433485535404929403, "value": 0.000249832619938437, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813599232, "name": "0.5", "id": 8689907665561100849, "value": 0.5, "children": []}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Power", "py/id": 130618812682208, "name": "**", "id": -6925208073502469590, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812693344, "name": "-", "id": 7338248899687164424, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813360192, "name": "Maximum concentration in negative electrode [mol.m-3]", "id": 1403618475143340938, "value": 24983.2619938437, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618816498048, "name": "maximum", "id": -1081378646585160925, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812321520, "name": "minimum", "id": -3863167891292241672, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812481456, "name": "@", "id": -7187558079876947875, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812692672, "name": "Sparse Matrix (20, 400)", "id": -6997513742234494012, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504, -12491.630996921805, 37474.892990765504], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813597600, "name": "24983.261744011077", "id": 4240369327199516886, "value": 24983.261744011077, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813597936, "name": "0.000249832619938437", "id": 433485535404929403, "value": 0.000249832619938437, "children": []}]}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813599232, "name": "0.5", "id": 8689907665561100849, "value": 0.5, "children": []}]}]}]}, {"py/object": "pybamm.expression_tree.functions.Sinh", "py/id": 130618893925744, "name": "function (sinh)", "id": -7417955762921766981, "function": "sinh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130619684477824, "name": "*", "id": -6377026607472615587, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618886457344, "name": "19.460872247804556", "id": 6066586310732700454, "value": 19.460872247804556, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812693680, "name": "-", "id": -3455383846556825401, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812690224, "name": "-", "id": 6531123047546519025, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812134416, "name": "y[862:882]", "id": 3768437392307318697, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 862, "stop": 882, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812690128, "name": "+", "id": -9057465236387790657, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813603360, "name": "-0.175189434028335", "id": 7119419765525498274, "value": -0.175189434028335, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812689744, "name": "y[902:922]", "id": 9166663523892018386, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 902, "stop": 922, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812693008, "name": "+", "id": 3170897706092531731, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812679328, "name": "+", "id": -2777145571203767738, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812747840, "name": "-", "id": -5660318420995079994, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812747216, "name": "-", "id": -8648600629949224676, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812746544, "name": "-", "id": -5891325346290398064, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812745872, "name": "-", "id": -3350222043601992656, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812745632, "name": "-", "id": 5457203170190986492, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812556704, "name": "-", "id": -4410910365300563589, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812684752, "name": "+", "id": -2628742156004538940, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812679808, "name": "+", "id": 2758625630139523814, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813605808, "name": "0.194", "id": 7740175521299642395, "value": 0.194, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812681584, "name": "*", "id": -3520860642976347259, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813606576, "name": "1.5", "id": 139763743454655332, "value": 1.5, "children": []}, {"py/object": "pybamm.expression_tree.functions.Exp", "py/id": 130618813768064, "name": "function (exp)", "id": -1991600572700148071, "function": "exp", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812681824, "name": "*", "id": -1142695973840209058, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813606096, "name": "-120.0", "id": -2666327541602118939, "value": -120.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812688832, "name": "*", "id": 1557036889693772453, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813606432, "name": "0.0351", "id": -6038329582079776216, "value": 0.0351, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812678896, "name": "function (tanh)", "id": 5845740464714440657, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812684800, "name": "+", "id": 5985495665387707307, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813602112, "name": "-3.44578313253012", "id": 8414662192146109933, "value": -3.44578313253012, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812679712, "name": "*", "id": -8867531115730044939, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813600096, "name": "12.048192771084336", "id": 2286773060606674287, "value": 12.048192771084336, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812556320, "name": "*", "id": 2987832948571782069, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813604944, "name": "0.0045", "id": -7336862686117729124, "value": 0.0045, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812680960, "name": "function (tanh)", "id": 1000424540452344079, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812688256, "name": "+", "id": 2500977860664972913, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813598128, "name": "-7.1344537815126055", "id": -2008027762916420739, "value": -7.1344537815126055, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812686192, "name": "*", "id": 6841719940451303636, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813599472, "name": "8.403361344537815", "id": 5137747773265705339, "value": 8.403361344537815, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812745488, "name": "*", "id": 2593665060573518236, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813600816, "name": "0.035", "id": 5340442218001158498, "value": 0.035, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812687536, "name": "function (tanh)", "id": 3525689365544371876, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812745296, "name": "+", "id": 7472497014997641358, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813363648, "name": "-18.466", "id": 2698408429651132352, "value": -18.466, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812744864, "name": "*", "id": 5236413183585979948, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813365904, "name": "20.0", "id": -2315749538005855916, "value": 20.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812745728, "name": "*", "id": -6222388883410834833, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813661360, "name": "0.0147", "id": 865196841519913110, "value": 0.0147, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812744144, "name": "function (tanh)", "id": -2237366335376051250, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812744288, "name": "+", "id": 737201374737237077, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813662512, "name": "-14.705882352941176", "id": 2973855845376108883, "value": -14.705882352941176, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812744816, "name": "*", "id": 1442672162688177164, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813662320, "name": "29.41176470588235", "id": -113256828160498776, "value": 29.41176470588235, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812746400, "name": "*", "id": -8458121232804279703, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813661552, "name": "0.102", "id": -1850981887219250428, "value": 0.102, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812745104, "name": "function (tanh)", "id": -3780828074974052996, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812746208, "name": "+", "id": 6961685620758259702, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813663760, "name": "-1.3661971830985917", "id": 7893090581833987542, "value": -1.3661971830985917, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812746064, "name": "*", "id": -1435395326191985150, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813663520, "name": "7.042253521126761", "id": -8437487278446070949, "value": 7.042253521126761, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812747072, "name": "*", "id": 5962223132358208642, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813664624, "name": "0.022", "id": -7588270992824822451, "value": 0.022, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812745968, "name": "function (tanh)", "id": -3444838196878594690, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812746880, "name": "+", "id": 7178807879491518423, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813664960, "name": "-54.8780487804878", "id": 336533465918387103, "value": -54.8780487804878, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812746736, "name": "*", "id": -3772427557061202442, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813664720, "name": "60.975609756097555", "id": -3846185782827536214, "value": 60.975609756097555, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812747696, "name": "*", "id": 8302701633561226124, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813665392, "name": "0.011", "id": 7061990918433917315, "value": 0.011, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812746640, "name": "function (tanh)", "id": -4667093808057287353, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812747552, "name": "+", "id": -333759140474274285, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813666304, "name": "-5.486725663716814", "id": 596050542444722654, "value": -5.486725663716814, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812747408, "name": "*", "id": 7931455061119874708, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813666064, "name": "44.24778761061947", "id": -8600761206958233429, "value": 44.24778761061947, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812681728, "name": "*", "id": 2663053549108018989, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813665776, "name": "0.0155", "id": 2465743936332173434, "value": 0.0155, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812132832, "name": "function (tanh)", "id": 2887192342577501511, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618880710208, "name": "+", "id": -7435334446882785747, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813667552, "name": "-3.6206896551724133", "id": 840276053350863505, "value": -3.6206896551724133, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812748032, "name": "*", "id": -3544537289702228274, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813667312, "name": "34.48275862068965", "id": -5637925993549098701, "value": 34.48275862068965, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812691328, "name": "*", "id": -7538571070900019829, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814229696, "name": "1e-06", "id": -2580769557222913764, "value": 1e-06, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812691760, "name": "+", "id": 7736217800210834407, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Division", "py/id": 130618812688544, "name": "/", "id": 8420292910285788713, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814315792, "name": "1.0", "id": -2100809710563135213, "value": 1.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Division", "py/id": 130618812689936, "name": "/", "id": -2317948313576916529, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814315792, "name": "1.0", "id": -2100809710563135213, "value": 1.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812690176, "name": "+", "id": -8577457382471511308, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130619696064528, "name": "-1.0", "id": -5413240934256496585, "value": -1.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812682256, "name": "maximum", "id": -4849613837013040514, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812690032, "name": "minimum", "id": 5675774943765906487, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812689456, "name": "@", "id": -829168953458010104, "domains": {"primary": ["negative electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812689120, "name": "Sparse Matrix (20, 400)", "id": 8742138080836835228, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984, -0.4999999999999983, 1.4999999999999984], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618813352224, "name": "y[2:402]", "id": 2860271470296008552, "domains": {"primary": ["negative particle"], "secondary": ["negative electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 2, "stop": 402, "step": null}], "evaluation_array": [false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618810305376, "name": "Column vector of length 20", "id": -3522241266837698914, "domains": {"primary": ["separator"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "entries": [[0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0], [0.0]], "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618810305616, "name": "*", "id": 3701854391193133796, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618810305664, "name": "0.00759375", "id": 7336952334383097846, "value": 0.00759375, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812756432, "name": "*", "id": -2991990513920916566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812749856, "name": "*", "id": -4360211028544939589, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812980144, "name": "2.0", "id": -5152612468232829164, "value": 2.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812749712, "name": "*", "id": 7720798338140752300, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812748368, "name": "*", "id": 7537189032895441055, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812745440, "name": "*", "id": 3408340872438249903, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813356880, "name": "6e-07", "id": 355168022731336579, "value": 6e-07, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Power", "py/id": 130618812744240, "name": "**", "id": -8623461634867238515, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812748080, "name": "maximum", "id": -3962336837355174394, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812746496, "name": "*", "id": -2628472635338675085, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812746352, "name": "3333.3333333333335", "id": -6323253136627928067, "value": 3333.3333333333335, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812690944, "name": "y[842:862]", "id": -649962113286084747, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 842, "stop": 862, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812904896, "name": "1e-08", "id": 8264878393496015688, "value": 1e-08, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813599232, "name": "0.5", "id": 8689907665561100849, "value": 0.5, "children": []}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Power", "py/id": 130618812748128, "name": "**", "id": 237302561589010522, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812748752, "name": "maximum", "id": -8188174639366095977, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812749376, "name": "minimum", "id": 3993867167987437362, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812748896, "name": "@", "id": 6826236906824664973, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812749040, "name": "Sparse Matrix (20, 400)", "id": -7753167272989850642, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813358416, "name": "51217.92521874824", "id": -4609095240902580030, "value": 51217.92521874824, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813356304, "name": "0.000512179257309275", "id": 7133712376225145202, "value": 0.000512179257309275, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813599232, "name": "0.5", "id": 8689907665561100849, "value": 0.5, "children": []}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Power", "py/id": 130618812748800, "name": "**", "id": 1917811863503173755, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812749568, "name": "-", "id": -1246477591419729199, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813360432, "name": "Maximum concentration in positive electrode [mol.m-3]", "id": 8933524311479642027, "value": 51217.9257309275, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812748752, "name": "maximum", "id": -8188174639366095977, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812749376, "name": "minimum", "id": 3993867167987437362, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812748896, "name": "@", "id": 6826236906824664973, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812749040, "name": "Sparse Matrix (20, 400)", "id": -7753167272989850642, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116, -25608.96286546366, 76826.88859639116], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813358416, "name": "51217.92521874824", "id": -4609095240902580030, "value": 51217.92521874824, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813356304, "name": "0.000512179257309275", "id": 7133712376225145202, "value": 0.000512179257309275, "children": []}]}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813599232, "name": "0.5", "id": 8689907665561100849, "value": 0.5, "children": []}]}]}]}, {"py/object": "pybamm.expression_tree.functions.Sinh", "py/id": 130618812748512, "name": "function (sinh)", "id": 9195165020260810540, "function": "sinh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812756240, "name": "*", "id": 1252999716597568335, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618886457344, "name": "19.460872247804556", "id": 6066586310732700454, "value": 19.460872247804556, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812756096, "name": "-", "id": 1438129123663594719, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812750528, "name": "-", "id": -4978577623806477239, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812750192, "name": "+", "id": 6180502162786781022, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813767920, "name": "3.8518235799803935", "id": 620304935402715880, "value": 3.8518235799803935, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812748608, "name": "y[882:902]", "id": 3054093096792367542, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 882, "stop": 902, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812750432, "name": "+", "id": 813362874902076708, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813603360, "name": "-0.175189434028335", "id": 7119419765525498274, "value": -0.175189434028335, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812750000, "name": "y[942:962]", "id": -870805730609750089, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 942, "stop": 962, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812755952, "name": "+", "id": 5123365761583074500, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812755088, "name": "-", "id": -8152118321675099416, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812754416, "name": "+", "id": 4998606054031930750, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812753792, "name": "+", "id": 5431271169514107080, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812753168, "name": "-", "id": 5818032960006493050, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812752496, "name": "+", "id": 6459499933431406763, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812751824, "name": "+", "id": 5849756346192955011, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813774208, "name": "2.16216", "id": 7088823027077335540, "value": 2.16216, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812751680, "name": "*", "id": -7390914559135385331, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813773920, "name": "0.07645", "id": 3467962075886846323, "value": 0.07645, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812750288, "name": "function (tanh)", "id": -4058806610612652244, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812751488, "name": "-", "id": -3479755179842202475, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813772960, "name": "30.834", "id": 6311483360681990758, "value": 30.834, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812751344, "name": "*", "id": -6849675900790099540, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813773200, "name": "57.858397200000006", "id": 8027320023713144814, "value": 57.858397200000006, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812750912, "name": "maximum", "id": 2122434397506504971, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812750048, "name": "minimum", "id": 6918834552341564157, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812750768, "name": "@", "id": -8558974238558345566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812750960, "name": "Sparse Matrix (20, 400)", "id": 7194773163440000726, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812752352, "name": "*", "id": 6289715363493954645, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130620427939200, "name": "2.1581", "id": 543019129418541479, "value": 2.1581, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812751248, "name": "function (tanh)", "id": 5704247280564288049, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812752160, "name": "-", "id": -7785982527032588290, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814709888, "name": "52.294", "id": 5665295360841558076, "value": 52.294, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812752016, "name": "*", "id": 7025941896119654872, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813774880, "name": "53.412228", "id": 2461957677817975307, "value": 53.412228, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812750912, "name": "maximum", "id": 2122434397506504971, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812750048, "name": "minimum", "id": 6918834552341564157, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812750768, "name": "@", "id": -8558974238558345566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812750960, "name": "Sparse Matrix (20, 400)", "id": 7194773163440000726, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812753024, "name": "*", "id": 1211148563028459181, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130620416434512, "name": "0.14169", "id": -3419048817258058669, "value": 0.14169, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812751920, "name": "function (tanh)", "id": -7754066623758951276, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812752832, "name": "-", "id": 4207632483616887984, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130620416436432, "name": "11.0923", "id": -5503757140826160107, "value": 11.0923, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812752688, "name": "*", "id": 2133528354538859689, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130620416433696, "name": "21.0852666", "id": -3344716853701631705, "value": 21.0852666, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812750912, "name": "maximum", "id": 2122434397506504971, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812750048, "name": "minimum", "id": 6918834552341564157, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812750768, "name": "@", "id": -8558974238558345566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812750960, "name": "Sparse Matrix (20, 400)", "id": 7194773163440000726, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812753648, "name": "*", "id": 4659861442619171071, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813351552, "name": "0.2051", "id": 7458922957963772, "value": 0.2051, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812752592, "name": "function (tanh)", "id": 2252511426160844267, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812753456, "name": "-", "id": 6802236584016486100, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813352464, "name": "1.4684", "id": 3418309655544577912, "value": 1.4684, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812753360, "name": "*", "id": 286367983352007038, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813353424, "name": "5.829105600000001", "id": 3261629117311082741, "value": 5.829105600000001, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812750912, "name": "maximum", "id": 2122434397506504971, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812750048, "name": "minimum", "id": 6918834552341564157, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812750768, "name": "@", "id": -8558974238558345566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812750960, "name": "Sparse Matrix (20, 400)", "id": 7194773163440000726, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812754272, "name": "*", "id": -4560397341261300114, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813357408, "name": "0.2531", "id": -5004762162693954208, "value": 0.2531, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812753264, "name": "function (tanh)", "id": -6502476172759175316, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618812754128, "name": "-", "id": 342744639602009179, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813364128, "name": "4.291641337386018", "id": -5528541941614304321, "value": 4.291641337386018, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812753984, "name": "*", "id": -2121849807242607481, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813267696, "name": "8.069908814589667", "id": 1675063614458922122, "value": 8.069908814589667, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812750912, "name": "maximum", "id": 2122434397506504971, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812750048, "name": "minimum", "id": 6918834552341564157, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812750768, "name": "@", "id": -8558974238558345566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812750960, "name": "Sparse Matrix (20, 400)", "id": 7194773163440000726, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812754944, "name": "*", "id": -2927027548940809717, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813610704, "name": "0.02167", "id": -8590452496054267420, "value": 0.02167, "children": []}, {"py/object": "pybamm.expression_tree.functions.Tanh", "py/id": 130618812753888, "name": "function (tanh)", "id": -7208229040751314603, "function": "tanh", "children": [{"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812754752, "name": "+", "id": -5840170938271985206, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813609648, "name": "-87.5", "id": -4786059711555051945, "value": -87.5, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812754608, "name": "*", "id": 6139688208598473797, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813607776, "name": "177.0", "id": 217763134228642563, "value": 177.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812750912, "name": "maximum", "id": 2122434397506504971, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812750048, "name": "minimum", "id": 6918834552341564157, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812750768, "name": "@", "id": -8558974238558345566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812750960, "name": "Sparse Matrix (20, 400)", "id": 7194773163440000726, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Multiplication", "py/id": 130618812755808, "name": "*", "id": 5501256929259757199, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814229696, "name": "1e-06", "id": -2580769557222913764, "value": 1e-06, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812755664, "name": "+", "id": 4992724793048039161, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Division", "py/id": 130618812754848, "name": "/", "id": 8756252382160020078, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814315792, "name": "1.0", "id": -2100809710563135213, "value": 1.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812750912, "name": "maximum", "id": 2122434397506504971, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812750048, "name": "minimum", "id": 6918834552341564157, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812750768, "name": "@", "id": -8558974238558345566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812750960, "name": "Sparse Matrix (20, 400)", "id": 7194773163440000726, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}, {"py/object": "pybamm.expression_tree.binary_operators.Division", "py/id": 130618812755232, "name": "/", "id": 7349184667665570886, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618814315792, "name": "1.0", "id": -2100809710563135213, "value": 1.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812755376, "name": "+", "id": -2510922712789457241, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130619696064528, "name": "-1.0", "id": -5413240934256496585, "value": -1.0, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Maximum", "py/id": 130618812750912, "name": "maximum", "id": 2122434397506504971, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.Minimum", "py/id": 130618812750048, "name": "minimum", "id": 6918834552341564157, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618812750768, "name": "@", "id": -8558974238558345566, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618812750960, "name": "Sparse Matrix (20, 400)", "id": 7194773163440000726, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [20, 400], "data": [-0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982, -0.4999999999999983, 1.4999999999999982], "row_indices": [18, 19, 38, 39, 58, 59, 78, 79, 98, 99, 118, 119, 138, 139, 158, 159, 178, 179, 198, 199, 218, 219, 238, 239, 258, 259, 278, 279, 298, 299, 318, 319, 338, 339, 358, 359, 378, 379, 398, 399], "column_pointers": [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]}, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812745824, "name": "y[402:802]", "id": 6546102134891824927, "domains": {"primary": ["positive particle"], "secondary": ["positive electrode"], "tertiary": ["current collector"], "quaternary": []}, "y_slice": [{"start": 402, "stop": 802, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979376, "name": "0.9999999999", "id": -3663784933113931164, "value": 0.9999999999, "children": []}]}, {"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812979616, "name": "1e-10", "id": -7111847809875954960, "value": 1e-10, "children": []}]}]}]}]}]}]}]}]}]}]}]}]}]}]}, "concatenated_initial_conditions": {"py/object": "pybamm.expression_tree.vector.Vector", "py/id": 130618810860368, "name": "Column vector of length 962", "id": 6364907207346112263, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entrieschildren": []}, "events": [{"py/object": "pybamm.models.event.Event", "py/id": 130618810305952, "name": "Minimum voltage [V]", "event_type": ["EventType.TERMINATION", 0], "expression": {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618810305904, "name": "+", "id": -3860508791382231101, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812694448, "name": "-3.105", "id": 5416901940801924310, "value": -3.105, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618811098480, "name": "@", "id": -1577769620560380028, "domains": {"primary": ["current collector"], "secondary": [], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618811090560, "name": "Sparse Matrix (1, 20)", "id": -7525531021275784590, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [1, 20], "data": [-0.5, 1.5], "row_indices": [18, 19], "column_pointers": [0, 2]}, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812750192, "name": "+", "id": 6180502162786781022, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813767920, "name": "3.8518235799803935", "id": 620304935402715880, "value": 3.8518235799803935, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812748608, "name": "y[882:902]", "id": 3054093096792367542, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 882, "stop": 902, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}]}]}}, {"py/object": "pybamm.models.event.Event", "py/id": 130618810306096, "name": "Maximum voltage [V]", "event_type": ["EventType.TERMINATION", 0], "expression": {"py/object": "pybamm.expression_tree.binary_operators.Subtraction", "py/id": 130618810306048, "name": "-", "id": -6636128000265116743, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812694352, "name": "Upper voltage cut-off [V]", "id": 8284540650754216103, "value": 4.1, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618811098480, "name": "@", "id": -1577769620560380028, "domains": {"primary": ["current collector"], "secondary": [], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618811090560, "name": "Sparse Matrix (1, 20)", "id": -7525531021275784590, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [1, 20], "data": [-0.5, 1.5], "row_indices": [18, 19], "column_pointers": [0, 2]}, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812750192, "name": "+", "id": 6180502162786781022, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813767920, "name": "3.8518235799803935", "id": 620304935402715880, "value": 3.8518235799803935, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812748608, "name": "y[882:902]", "id": 3054093096792367542, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 882, "stop": 902, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}]}]}}, {"py/object": "pybamm.models.event.Event", "py/id": 130618810306288, "name": "Minimum voltage switch [V]", "event_type": ["EventType.SWITCH", 3], "expression": {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618810306240, "name": "+", "id": 1988187580632174397, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812744384, "name": "-3.005", "id": 8386077036940763341, "value": -3.005, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618811098480, "name": "@", "id": -1577769620560380028, "domains": {"primary": ["current collector"], "secondary": [], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618811090560, "name": "Sparse Matrix (1, 20)", "id": -7525531021275784590, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [1, 20], "data": [-0.5, 1.5], "row_indices": [18, 19], "column_pointers": [0, 2]}, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812750192, "name": "+", "id": 6180502162786781022, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813767920, "name": "3.8518235799803935", "id": 620304935402715880, "value": 3.8518235799803935, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812748608, "name": "y[882:902]", "id": 3054093096792367542, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 882, "stop": 902, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}]}]}}, {"py/object": "pybamm.models.event.Event", "py/id": 130618810306480, "name": "Maximum voltage switch [V]", "event_type": ["EventType.SWITCH", 3], "expression": {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618810306432, "name": "+", "id": 8699304318157575302, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618812745008, "name": "-4.199999999999999", "id": 8716854171987909238, "value": -4.199999999999999, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.MatrixMultiplication", "py/id": 130618811098480, "name": "@", "id": -1577769620560380028, "domains": {"primary": ["current collector"], "secondary": [], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618811090560, "name": "Sparse Matrix (1, 20)", "id": -7525531021275784590, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [1, 20], "data": [-0.5, 1.5], "row_indices": [18, 19], "column_pointers": [0, 2]}, "children": []}, {"py/object": "pybamm.expression_tree.binary_operators.Addition", "py/id": 130618812750192, "name": "+", "id": 6180502162786781022, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "children": [{"py/object": "pybamm.expression_tree.scalar.Scalar", "py/id": 130618813767920, "name": "3.8518235799803935", "id": 620304935402715880, "value": 3.8518235799803935, "children": []}, {"py/object": "pybamm.expression_tree.state_vector.StateVector", "py/id": 130618812748608, "name": "y[882:902]", "id": 3054093096792367542, "domains": {"primary": ["positive electrode"], "secondary": ["current collector"], "tertiary": [], "quaternary": []}, "y_slice": [{"start": 882, "stop": 902, "step": null}], "evaluation_array": [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], "children": []}]}]}]}}], "mass_matrix": {"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618811525136, "name": "Sparse Matrix (962, 962)", "id": 1381728111553437049, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [962, 962], "data": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "row_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861], "column_pointers": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862, 862]}, "children": []}, "mass_matrix_inv": {"py/object": "pybamm.expression_tree.matrix.Matrix", "py/id": 130618815656448, "name": "Sparse Matrix (862, 862)", "id": -4567468301409756168, "domains": {"primary": [], "secondary": [], "tertiary": [], "quaternary": []}, "entries": {"shape": [862, 862], "data": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], "row_indices": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861], "column_pointers": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862]}, "children": []}}